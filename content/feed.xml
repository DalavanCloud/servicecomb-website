<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-11-08T16:13:32+08:00</updated><id>/</id><title type="html">Apache ServiceComb</title><subtitle>The homepage of ServiceComb</subtitle><author><name>{&quot;name&quot;=&gt;nil, &quot;avatar&quot;=&gt;&quot;/assets/images/ServiceComb-logo-3.jpg&quot;, &quot;bio&quot;=&gt;&quot;ServiceComb is a microservice framework that provides service registration, discovery, configuration and management utilities.&quot;, &quot;biocn&quot;=&gt;&quot;ServiceComb提供了一套关于服务注册，服务发现，服务配置以及管理功能的微服务框架&quot;, &quot;location&quot;=&gt;&quot;China&quot;, &quot;locationcn&quot;=&gt;&quot;中国&quot;, &quot;email&quot;=&gt;&quot;dev@servicecomb.apache.org&quot;, &quot;uri&quot;=&gt;nil, &quot;bitbucket&quot;=&gt;nil, &quot;codepen&quot;=&gt;nil, &quot;dribbble&quot;=&gt;nil, &quot;flickr&quot;=&gt;nil, &quot;facebook&quot;=&gt;nil, &quot;foursquare&quot;=&gt;nil, &quot;github&quot;=&gt;&quot;ServiceComb&quot;, &quot;google_plus&quot;=&gt;nil, &quot;keybase&quot;=&gt;nil, &quot;instagram&quot;=&gt;nil, &quot;lastfm&quot;=&gt;nil, &quot;linkedin&quot;=&gt;nil, &quot;pinterest&quot;=&gt;nil, &quot;soundcloud&quot;=&gt;nil, &quot;stackoverflow&quot;=&gt;nil, &quot;steam&quot;=&gt;nil, &quot;tumblr&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;vine&quot;=&gt;nil, &quot;weibo&quot;=&gt;nil, &quot;xing&quot;=&gt;nil, &quot;youtube&quot;=&gt;nil}</name><email>dev@servicecomb.apache.org</email></author><entry xml:lang="cn"><title type="html">对话Apache大咖</title><link href="/cn/docs/talk-to-apache-experts" rel="alternate" type="text/html" title="对话Apache大咖" /><published>2018-11-05T00:00:00+08:00</published><updated>2018-11-05T17:10:21+08:00</updated><id>/cn/docs/talk-to-apache-experts</id><content type="html" xml:base="/cn/docs/talk-to-apache-experts">&lt;h2 id=&quot;对话apache大咖&quot;&gt;对话Apache大咖&lt;/h2&gt;

&lt;h3 id=&quot;活动简介&quot;&gt;活动简介&lt;/h3&gt;

&lt;p&gt;2018年10月13日下午，国内首个从Apache孵化器毕业的微服务项目ServiceComb的团队邀请Apache基金会三位专家成员：Apache孵化器主席Justin Mclean，Apache董事会董事Roman Shaposhnik, 以及Apache基金会秘书长兼形象大使Craig Rossell，与国内Apache项目开发者相聚于上海。针对开发者所关心的Apache精英管理模式，从孵化器毕业成为顶级项目，开源软件的商业化等主题进行了深入的交流。本文对活动当日的交流进行了整理和总结。&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;apache基金会简介&quot;&gt;Apache基金会简介&lt;/h3&gt;

&lt;p&gt;Apache软件基金会是一个成立于1999年的非盈利慈善组织，英文名称 Apache Software Foundation，简称 ASF，最早源于开发Apache HTTP服务器的一个爱好者组织“Apache组织”。经过近20年的发展，Apache软件基金会已成为世界上最大的开源基金会，负责监管350多个免费的企业级项目和1.9亿多行的代码，它们作为主干支撑着全球广泛使用的应用程序。&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;开场介绍&quot;&gt;开场介绍&lt;/h3&gt;

&lt;p&gt;大家好，我是姜宁，今天咱们聚集了华东地区参与Apache相关项目开发的Committer，这些项目包括Beam、Dubbo、Gearpump、Griffin、Kerlin、ServiceComb、Skywalking和Weex。值得一提的是这些Apache项目大部分都还在孵化器中孵化，同时还有一些准备进入Apache孵化的项目。&lt;/p&gt;

&lt;p&gt;我在2006年9月作为 CXF 初始 committer与Apache软件基金会结缘，2011年1月正式成为 Apache基金会成员。我在基金会作为导师（Mentor）参与了多个来自中国的Apache孵化器项目。2017年，我作为项目负责人推动ServiceComb进入Apache 孵化器进行孵化，现在 ServiceComb已经很快就要从Apache孵化器毕业了。&lt;/p&gt;

&lt;p&gt;虽然参与了很多Apache开源项目，坦白地说我对Apache的项目孵化流程其实不是特别清楚。直到ServiceComb这个项目，我经历了寻找Mentor，捐赠协议签署，迁移项目，孵化器发版，以及毕业准备这些流程之后，才对Apache孵化器孵化流程有了比较深的认识。&lt;/p&gt;

&lt;p&gt;今天的Meetup之前，和大家交流中我发现大家最关心的问题就是如何从Apache孵化器毕业。 我们今天邀请到远道而来的Apache Member，Roman，Justin，Craig和国内Apache项目开发者一起交流的分享他们有关Apache孵化器孵化经验，以及开源相关的感悟。&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;活动期间问答交流&quot;&gt;活动期间问答交流&lt;/h3&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;如何从apache软件基金会孵化器毕业成为顶级项目&quot;&gt;如何从Apache软件基金会孵化器毕业成为顶级项目&lt;/h4&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;从Apache孵化器毕业，首要为孵化项目构建一个社区，项目毕业意味着很多事情，比如要保持开发者的多样性，项目贡献者不能仅仅来自一个公司。此外，还应该尝试小版本发布（make micro releases）。&lt;/p&gt;

&lt;p&gt;[Roman]&lt;/p&gt;

&lt;p&gt;发布版本时，除了项目本身，还有许多合规性工作（mechanical stuff）要做，例如开源协议，发版签名，发版投票等等。项目进入孵化器后，要尽快尝试发布第一个版本。许多孵化项目（podling）都想在发布版本时中搞定这样或那样的功能，我总是跟他们说，没关系，项目不一定能够跑起来，甚至不一定能成功编译，一定要先把合规性问题解决，然后再专注于功能开发。&lt;/p&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;没错，要尽早发版、多做发版。&lt;/p&gt;

&lt;p&gt;[姜宁]&lt;/p&gt;

&lt;p&gt;发布版本尽管痛苦，但是要尽早去做。ServiceComb在发布第一个版本时，团队也非常痛苦，但是经历过这个阶段，后面会变得越来越顺利。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;孵化器毕业要点解读&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;构建社区&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ASF一直坚信好的软件是由强大的社区构建出来的。诚然，代码是一个软件社区的重中之重，但Apache之道”Community over code”同样强调社区的重要性。它意味着我们的行事方式，如何看待彼此，如何进行决策，甚至如何编写代码。健康、互相尊重的社区非常重要，这不仅让社区的开发者有被尊重的感觉，也会带来切实的好处。一个健康、多样、包容的社区，可以促进项目不断成长，可持续发展。甚至，有助于用开源技术提供服务的公司获得商业上的成功。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;保持贡献者多样性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ASF非常强调多样性原则。 大部分开源软件项目都是创新型项目，多样性保证了开源项目的持续创新， 也保证了社区的健康发展。 开源项目鼓励所有个体或公司参与， 让他们感觉能对项目有所掌控，或者会对项目产生一定影响。这样可以保证意见的多样性、用户的多样性、系统的的多样性。Apache项目通常是要求有三个以上不同公司的人参与开发，以保证项目不会因为其中某个公司的退出而终止。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;尽早、尽量多的进行版本发布&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;对于构建持续增长的社区有何建议&quot;&gt;对于构建持续增长的社区，有何建议？&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;[郑士汉，Weex]：社区建设、多样性对于毕业非常重要，您能给出一些相关建议吗？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;要让大家觉得自己是受欢迎的。当有人在邮件列表中提问时，我通常会分配PMC成员关注问题，并咨询提问者是否还需要其他帮助，或者有其他问题，我把这个作为日常工作。这样也有利于开发者从用户变成提交者甚至PMC成员。良好的文档可以让大家更容易使用你的项目。而文档的缺失则可能造成用户的流失，人们编译编译代码，就再也不使用这个项目了，因为项目上手太难了。&lt;/p&gt;

&lt;p&gt;[Roman]&lt;/p&gt;

&lt;p&gt;良好的文档确实非常重要。此外，我也有其他方面的建议。Apache软件基金会参与了一些项目，吸引了不少开贡献者。我们一直指导Google代码夏令营活动，夏令营由Google赞助，帮开发者更好的发展他们自己的项目。如果你可以让自己的社区参加类似的活动，对于社区建设无疑是有很大帮助的。因为大家来自中国的社区，我也建议一些中国的大公司，例如华为，也可以举办类似的学生项目，学生是一个项目最好的新鲜血液。&lt;/p&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;在会议中分享项目、建立技术博客也是不错的方式。&lt;/p&gt;

&lt;p&gt;[吴晟]&lt;/p&gt;

&lt;p&gt;Skywalking是中国开发者发起的一个Apache孵化项目，刚加入孵化时只有15个committer，而现在，代码层面的提交者已经达到了70人。我们提倡大家提交小的改动，这样很容易提交代码来做贡献，所以我们每次发布版本都会吸引一些开发者。当我们没有太多精力投入到测试时，我们会吸引开发者来提供测试，他们可以提交集成测试结果，可以提交测试模型，只要保持正确的编程风格，PMC的成员就可以进行审查，并合并代码。&lt;/p&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;这里我想多提一点，很多项目过于注重质量。有些Apache项目收到一些代码不太完美的提交，就直接丢弃了这些提交，然后自己从头搞起。其实这并没有关系，如果你收到了不太完美的PR，可以请社区成员帮忙改进质量。另外，在JIRA或Github上浏览issue时，如果发现一些比较简单的issue，你可以加个”easy to fix”标签，告诉大家这个issue比较容易解决，这样也可以吸引人来贡献。&lt;/p&gt;

&lt;p&gt;[吴晟]&lt;/p&gt;

&lt;p&gt;没错，我们也会跟踪一些讨论，有些时候我们可能会考虑过于理想的方案。但是好的项目有时候并不完全是完美的代码决定的，还要考虑不同的场景。这样项目才能不断壮大。&lt;/p&gt;

&lt;p&gt;[姜宁]&lt;/p&gt;

&lt;p&gt;我也谈谈自己的感受，我非常赞同Justin所说的“Low the bar”。我在参与Apache Camel项目开发时，它已经非常成熟了，但是我们还采用先提交后Review的方式进开发。 有很多人为Camel提交Patch，我们从来不说“No”。有些人提交的代码质量可能并不太好，我们还是会接受这些补丁，让贡献者觉得自己得到认可。这样，开发者就不会想“啊，我还不够优秀，还无法成为committer，我提交的补丁也不够好，那我还是不提交补丁了。” 在我们合入代码时候，我们也会顺道帮助修复一下补丁上面的问题。 顺便说一句，Apache Camel现在有200多个组件，目前项目只有大概4，5个人在维护，很大程度上是得益与这种降低社区门槛的方式。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;构建社区的建议&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;让大家觉得自己是受欢迎的。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;编写良好的文档，降低初学者入门难度。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;参与或组织类似Google代码夏令营的学生项目。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;在技术会议中分享项目经验，建立技术博客传播技术。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;提倡小的改动，乐于接受他人的贡献，乐于帮助改进质量，让开发者更容易参与社区贡献。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;项目的提交者和pmc成员不够活跃我应该怎么办&quot;&gt;项目的提交者和PMC成员不够活跃，我应该怎么办？&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;[史少锋，Kerlin]：有些开发者成为提交者后就消失了，有时候PMC成员也不能非常及时的审查提交，有没有什么规则推动大家活跃起来？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;我觉得提交者或者PMC成员不活跃并不是问题，不是所有人都必须活跃。但是如果项目的导师不活跃就是问题了，因为导师要指导项目，告诉项目成员正确的做事方法。我们没办法为提交者和PMC成员制定“（及时反馈的）规则”，这样对他们要求太高了。我们应该降低门槛，让更多人参与进来。&lt;/p&gt;

&lt;p&gt;[Roman]&lt;/p&gt;

&lt;p&gt;通常，每个项目的PMC都有VP（Vice President），VP主要负责合规性相关的工作，向Apache董事会汇报，但是VP也要担当起项目的领导者角色。即便所有其他PMC成员都在沉睡，VP也是唯一要保持清醒的人。VP是默认的那个要回答问题的人，当然不是技术相关的问题，而是回答管理流程相关的问题。如果邮件列表无人响应，你要写信给VP，告诉他，“嘿，大家似乎都睡着了，我们应该怎么办呢？”。VP有权利做出改变，他可以组织大家开始审查提交，让大家醒过来。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;要点总结&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Apache基金会是个公益组织，不能通过强制要求来约束成员。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;可以通过降低门槛，让更多人可以参与进来，解决社区响应不及时的问题。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;VP承担项目领导责任，要时刻保持活跃。遇到问题可以向VP寻求帮助&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在Apache软件基金会的组织结构中，Apache董事会根据基金会的管理原则，负责管理和监督对外合作的商业和事务，包括基金、知识资产、注册商标等。每个Apache项目都有一个PMC（项目管理委员会），负责项目的管理和监督，并定期向Apache董事会汇报项目情况。PMC有一位主席（Chairperson），也被称为该项目的Vice President，简称VP。VP由董事会指定，是董事会和项目之间的接口人，负责项目汇报、同时与PMC一同保证项目和代码遵从法规、管理商标事务、管理邮件列表等合规性问题，发展新的Committer和PMC成员。&lt;/p&gt;

&lt;h4 id=&quot;发版投票过程漫长如何保持正确的发版姿势&quot;&gt;发版投票过程漫长，如何保持正确的发版“姿势”？&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;[张天伦，Gearpump]：发版投票需要经过至少72+72个小时，过程非常漫长，又担心犯错误导致投票过少进而导致发版失败。并且，有时候发起投票，响应的人比较少。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;犯一次错误没关系，可以向导师寻求帮助以避免重复多次犯错误。在开始的一两次发版中，有一些错误很正常，但是后续的版本发布就会越来越顺利。如果发版时响应人数比较少，可以直接在邮件列表中提醒孵化器项目管理委员会（IPMC）成员，特别是导师，进行投票。&lt;/p&gt;

&lt;p&gt;[Roman]&lt;/p&gt;

&lt;p&gt;我想大家对敏捷开发都比较熟悉，敏捷开发提倡小幅度的改动，多进行更新。如果你的项目遵循敏捷开发方式，将对版本发布大有裨益。我指导项目孵化时，除了首次发版需要在合规性方面花费很多时间，后面的版本尽量在每个月或每两个月发布一次，新版本不一定要加入很多功能，每月发一次版本，更容易让IPMC的成员审查新版本的变动。因此，首次发版，解决合规性问题，然后尽快发版，多做发版。&lt;/p&gt;

&lt;p&gt;[Justin]&lt;/p&gt;

&lt;p&gt;另外，可以将新版本改动写入版本说明中，可以让审查工作变得轻松很多。&lt;/p&gt;

&lt;p&gt;[Roman]&lt;/p&gt;

&lt;p&gt;没错，小幅度迭代也可以帮你构建社区。社区贡献者提交的补丁越小，越容易进行审查。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在Apache孵化器发布版本的要点：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;不要担心在发版时犯错误，大胆的向导师和IPMC成员寻求帮助，但要避免犯重复的错误&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;借鉴敏捷开发模式，小版本迭代，频繁更新&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;首次发版扫除一切合规性问题，后续版本专注功能和质量&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;让版本更新更容易审查&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;如何使用开源软件进行商业化&quot;&gt;如何使用开源软件进行商业化？&lt;/h4&gt;

&lt;p&gt;[Roman]&lt;/p&gt;

&lt;p&gt;开源商业化的模式是多种多样的。红帽（RedHat）就是一个很成功的例子，他们用开源收益颇丰。也有一些新的公司，例如我曾工作过的Cloudera，利用开源赚钱，至少赚到了买下Hortonworks公司的钱（众人笑）。&lt;/p&gt;

&lt;p&gt;我大致可以列出3种开源商业化的模式。首先，几乎所有云服务厂商都使用开源产品，将其变成服务来进行营利，这就是一个很常见的商业化模式。例如，我很惊喜地看到华为云的流服务使用了Apache Flink，这就是华为使用开源盈利的方式。&lt;/p&gt;

&lt;p&gt;另外一种比较传统但应用广泛的商模式，以开源软件为核心构建产品，并提供额外的组件和技术。这些额外的部分不一定是开源的。例如你的产品可以用Apache项目作为核心，然后加入GPL协议的组件，再加上一些私有的组件，然后就可以像微软出售Windows系统，或者Adobe出售Adobe Creative Suite那样盈利了。&lt;/p&gt;

&lt;p&gt;第三种商业化模式，就是基于开源软件提供差异化的集成服务或者解决方案。将开源软件集成为一个更大的系统，提供给客户以进行营利。你可以运营一个专业的服务公司，用开源软件帮助用户简化业务。例如，你的公司服务于酒店或工厂，帮他们实现自动化运维。客户并不在乎你用什么软件或技术，他们只关心端到端的方案能够顺利实施。你的公司使用开源软件，可以按照自己的需求进行优化，也避免了收费的商业软件侵占你的利润。&lt;/p&gt;

&lt;p&gt;[Craig]&lt;/p&gt;

&lt;p&gt;在培训行业，经常有公司需要培训自己的员工来学习、使用Apache软件。我们曾短暂的考虑过和商业公司合作提供培训服务，然后与商业公司分享利润。但是这个念头只是一闪而过就被我们否决了，这样会与提供Apache软件培训服务的人形成竞争，这样有悖于Apache厂商中立的原则。所以，如果你想通过开源软件培训来盈利，大胆去做，这也是一个不错的开源商业化模式。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;开源商业化的几种方式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;用开源软件提供服务，例如那些云服务厂商&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;基于开源软件提供额外的收费功能&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;利用开源软件提供集成服务，并提供商业支持&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;开展开源软件的培训服务&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;活动尾声&quot;&gt;活动尾声&lt;/h3&gt;

&lt;p&gt;经过一番深入的沟通和交流，现场的开发者对Apache基金会、基金会的精英管理模式、Apache孵化器的运作模式都有了进一步的了解。在meetup活动的最后，三位Apache专家带领现场所有开发者进行了“Apache问答”小游戏。问答题目由Justin编写，公布在网站https://rawgit.com/justinmclean/ApacheQuiz/master/compiled/index.html 上，问题有不同的难度等级，涉及Apache基金会的管理模式、Apache开源协议、版本发布注意事项、三方软件集成等。三位专家与开发者一起答题，并对题目进行了风趣幽默的解读。最终，活动在一片欢笑声中结束，三位专家与开发者进行合影留念。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/apache-developers-gathering-shanghai.jpg&quot; alt=&quot;apache-developers-gathering&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;加入apache开发者社区&quot;&gt;加入Apache开发者社区&lt;/h3&gt;
&lt;p&gt;Apache软件基金会作为全球最大的开源软件基金会，其独特的精英治理模式和社区文化得到了全球无数开发者的青睐。如果读者有意加入Apache社区，参与Apache开源项目贡献，可以参考《&lt;a href=&quot;http://servicecomb.apache.org/cn/developers/becomming-a-commiter&quot;&gt;如何成为commiter&lt;/a&gt;》，了解Apache基金会的管理模式，以及《&lt;a href=&quot;http://servicecomb.apache.org/cn/docs/how-to-grow-up-to-be-an-apache-committer&quot;&gt;从开源小白到Apache Commiter&lt;/a&gt;》，体会开发者成长为commiter的心路历程。期待在Apache社区见到更多中国开发者的身影，我们，社区见！&lt;/p&gt;</content><author><name>Zhen Ju</name><email>juzhenatpku@gmail.com</email><uri>https://github.com/crystaldust</uri></author><category term="微服务" /><category term="Meetup" /><category term="Apache" /><summary type="html">Apache专家现场解读Apache基金会及孵化器运作模式</summary></entry><entry xml:lang="cn"><title type="html">Apache ServiceComb Meetup -Shanghai 2018.10.12 Report (PPT Download)</title><link href="/cn/docs/Apache-ServiceComb-Meetup-2018-Shanghai-Report/" rel="alternate" type="text/html" title="Apache ServiceComb Meetup -Shanghai 2018.10.12 Report (PPT Download)" /><published>2018-10-29T00:00:00+08:00</published><updated>2018-10-29T17:18:43+08:00</updated><id>/cn/docs/Apache-ServiceComb-Meetup-2018-Shanghai-Report</id><content type="html" xml:base="/cn/docs/Apache-ServiceComb-Meetup-2018-Shanghai-Report/">&lt;p&gt;Apache软件基金会（ASF）的三位Apache专家与ServiceComb Team在上海世博会会展中心举办了Apache Service ServiceComb会议。。此次会议，八位发言者提出了六个主题，分别是关于Apache Way的解释、Apache ServiceComb的路线图、ServiceMesh的探索分享、快速微服务编程的实践经验等。约50人参加了现场会议，600人在线观看。会中以讨论互动的形式进行，开放的、积极的气氛贯穿整个会议。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;《Apache之道》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/EN/1_The_Apache_Way.pdf&quot;&gt;PDF下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roman Shaposhnik, Justin Mclean, Craig Russell：&lt;/strong&gt; Apache软件基金会是全球最大的开源基金会，目前拥有300多个开源项目，涵盖大数据、云计算、服务器和Web框架、构建管理、内容管理、物联网等众多领域。三位来自Apache基金会的专家将详细介绍Apache基金会发展历程及现状，阐述Apache基金会的运作方式，解读Apache软件基金会的核心理念—Apache Way。同时分析作为一个Apache项目需要遵守的合规性规则及背后所蕴含的意义。并介绍Apache基金会孵化器的概况及项目流程，讨论Apache孵化项目如何发展社区并毕业成为顶级项目。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/1.jpeg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;《Apache ServiceComb(incubating)社区最新路线》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/2_ApacheServiceComb(Incubating)Community_Roadmap.pdf&quot;&gt;中文PDF下载&lt;/a&gt;  &lt;a href=&quot;/assets/slides/20181012/EN/2_ApacheServiceComb(Incubating)Community_Roadmap.pdf&quot;&gt;英文PDF下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;姜宁：&lt;/strong&gt; 介绍ServiceComb社区自1.0.0版本发布之后的整体技术演进路线和项目在Apache软件基金会的最新成长状态。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/2.jpeg&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;《ServiceComb在Service Mesh的探索与思考》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/4_ServiceComb’s_Exploration_of_Service_Mesh.pdf&quot;&gt;中文PDF下载&lt;/a&gt;  &lt;a href=&quot;/assets/slides/20181012/EN/4_ServiceComb’s_Exploration_of_Service_Mesh.pdf&quot;&gt;英文PDF下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;田晓亮：&lt;/strong&gt; 介绍ServiceComb在生态兼容Service Mesh方面的工作，阐述ServiceComb在支持零侵入微服务化方面以及和传统微服务框架实现方式的协同部署、治理的探索。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/4.jpeg&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;《Service Mesh微服务化和传统框架微服务化混合部署协同实践分享》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/3_ServiceMesh-based_Microservices_and_Those_Based_on_a_Traditional_Architecture.pdf&quot;&gt;中文PDF下载&lt;/a&gt;  &lt;a href=&quot;/assets/slides/20181012/EN/3_ServiceMesh-based_Microservices_and_Those_Based_on_a_Traditional_Architecture.pdf&quot;&gt;英文PDF下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;苗彦杰：&lt;/strong&gt; 在以Service Mesh为代表的零侵入微服务化发展过程中，如何与传统侵入式框架开发的微服务混合部署、协同治理成为了一道难题。演讲者将从自身的业务背景出发，介绍如何借助ServiceComb和Mesher完成混合部署，分享其中遇到的问题和解决方法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/3.jpeg&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;《Apache Committer 成长经验分享》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/5_My_Participation_in_ServiceComb.pdf&quot;&gt;中文PDF下载&lt;/a&gt;  &lt;a href=&quot;/assets/slides/20181012/EN/5_My_Participation_in_ServiceComb.pdf&quot;&gt;英文PDF下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;冯征：&lt;/strong&gt; 作为ServiceComb的新晋PMC和Committer，讲述自己如何在ServiceComb项目中成长的历程，分享自身参与开源社区的经验和收获。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/5.jpeg&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;《快速微服务化编程体验》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/6_Experience_on_Fast_Microservice_Programming.pdf&quot;&gt;中文PDF下载&lt;/a&gt;  &lt;a href=&quot;/assets/slides/20181012/EN/6_Experience_on_Fast_Microservice_Programming.pdf&quot;&gt;英文PDF下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;巨震：&lt;/strong&gt; 现场演示如何快速使用ServiceComb Java-chassis和Service Mesh技术Mesher进行微服务化应用编程，结合Kubernetes进行快速部署，并和与会者互动练习。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/6.jpeg&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;关于Apache ServiceComb 项目&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;ServiceComb Apache软件基金会孵化项目的主体代码由华为云捐赠，致力于帮助企业轻松构建云原生应用及传统企业业务快速微服务化，通过系列解决方案帮助用户快速开发微服务的同时实现对这些微服务应用的高效运维管理。它具有完整的微服务生态栈，无厂商锁定，当前遵循Apache Way进行孵化，已拥有如消费者云、云EI、云安全、云核等华为业务之外的一批非华为商用用户，且社区和开发者也日趋多样化。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如您有更多问题关于Aapche ServiceComb，请您加入ServiecComb Gitter聊天室咨询：&lt;a href=&quot;https://gitter.im/ServiceCombUsers/Lobby&quot;&gt;ServiceComb Gitter 聊天室&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Dean Lee</name></author><category term="microservice" /><category term="Meetup" /><summary type="html">Apache ServiceComb Meetup -Shanghai 2018.10.12 Report (PPT)</summary></entry><entry xml:lang="en"><title type="html">Apache ServiceComb Meetup -Shanghai 2018.10.12 Report (PPT Download)</title><link href="/docs/Apache-ServiceComb-Meetup-2018-Shanghai-Report/" rel="alternate" type="text/html" title="Apache ServiceComb Meetup -Shanghai 2018.10.12 Report (PPT Download)" /><published>2018-10-29T00:00:00+08:00</published><updated>2018-10-29T10:26:28+08:00</updated><id>/docs/Apache-ServiceComb-Meetup-2018-Shanghai-Report</id><content type="html" xml:base="/docs/Apache-ServiceComb-Meetup-2018-Shanghai-Report/">&lt;p&gt;&lt;strong&gt;Apache ServiceComb Meetup&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Three Apache experts from Apache Software Foundation (ASF) with ServiceComb Team host an Apache ServiceComb Meetup at the Shanghai World Expo Exhibition and Convention Center.  (Shanghai, China) from 13:30-16:50 PM on Friday, October 12. According to the session, eight-speaker presents six topics about Interpretation of the Apache Way, Roadmap of the Apache ServiceComb,  Exploration of Service Mesh Sharing, Hands-on Experience with Fast Microservices Programming, etc. About 50 participants attended the session on-site, and about 600 participants watched the session online.  Meetings with an open, discussion-oriented atmosphere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;《The Apache Way》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/EN/1_The_Apache_Way.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roman Shaposhnik, Justin Mclean, Craig Russell:&lt;/strong&gt; The Apache Software Foundation (ASF) is the world’s largest open source foundation with more than 300 open source projects, covering big data, cloud computing, servers and web frameworks, build management, content management, IoT, and more areas.  Three experts from ASF will talk about the history and development of the ASF, its operation model, and will elaborate on the core ideas of the ASF – The Apache Way.This session will also cover the compliance rules and their meanings for Apache projects. And introduce the Apache Incubator project and its standard procedures. The presenter will talk about how open-source projects can develop into communities through the Apache Incubator project, and how these projects can eventually become top projects.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/1.jpeg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;《Latest Roadmap of the Apache ServiceComb(incubating) Community》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/EN/2_ApacheServiceComb(Incubating)Community_Roadmap.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jiang Ning:&lt;/strong&gt; This session will introduce the overall evolutionary roadmap of technology for the ServiceComb project and its latest development within the Apache Software Foundation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/2.jpeg&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;《ServiceComb’s Exploration of Service Mesh》&lt;/strong&gt;   &lt;br /&gt;
&lt;a href=&quot;/assets/slides/20181012/EN/4_ServiceComb’s_Exploration_of_Service_Mesh.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tian Xiaoliang:&lt;/strong&gt; This session will introduce the efforts made by ServiceComb to stay compatible with the Service Mesh ecosystem. The presenter will talk about ServiceComb’s exploration into hybrid deployment and governance of non-intrusive microservices and those based on a traditional architecture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/4.jpeg&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;《Practice Sharing: Hybrid Deployment of Service Mesh-based Microservices and Those Based on a Traditional Architecture》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/EN/3_ServiceMesh-based_Microservices_and_Those_Based_on_a_Traditional_Architecture.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Miao Yanjie:&lt;/strong&gt;  Harmonizing non-intrusive microservices (Service Mesh being a shining example) with those based on traditional architectures to enable hybrid deployment and collaborated governance is no easy task. By drawing on practices from his own industry, the presenter will talk about how to use ServiceComb and Mesher to enable hybrid microservices deployment using different architectures, problems encountered, and some solutions to them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/3.jpeg&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;《Journey to Becoming an Apache Committer》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/EN/5_My_Participation_in_ServiceComb.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feng Zheng:&lt;/strong&gt; As a new PMC (Project Management Committee) member and committer to ServiceComb, the presenter will talk about his own experience participating in the ServiceComb project, lessons learned and achievements made.
&lt;img src=&quot;/assets/images/hc2018/5.jpeg&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;《Hands-on Experience with Fast Microservices Programming》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/slides/20181012/EN/6_Experience_on_Fast_Microservice_Programming.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ju Zhen:&lt;/strong&gt; The presenter will demonstrate how to use ServiceComb Java Chassis and Mesher of Service Mesh to quickly program microservices applications, and how to quickly deploy them by using Kubernetes. Audience can gain some hands-on experiences at the same time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hc2018/6.jpeg&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Please checkout ServiceComb Gitter if you are interesting about Apache ServiceComb Project &lt;a href=&quot;https://gitter.im/ServiceCombUsers/Lobby&quot;&gt;ServiceComb Gitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Dean Lee</name></author><category term="microservice" /><category term="Meetup" /><summary type="html">Apache ServiceComb Meetup Report (PPT)</summary></entry><entry xml:lang="cn"><title type="html">OpenSource India Summit: Hands-on Apache ServiceComb(Incubating) MicroServices Workshop</title><link href="/cn/docs/osi-microservices/" rel="alternate" type="text/html" title="OpenSource India Summit: Hands-on Apache ServiceComb(Incubating) MicroServices Workshop" /><published>2018-10-15T00:00:00+08:00</published><updated>2018-10-15T10:26:28+08:00</updated><id>/cn/docs/OSI-Workshop-Report</id><content type="html" xml:base="/cn/docs/osi-microservices/">&lt;p&gt;​&lt;strong&gt;Event Date/Time&lt;/strong&gt;: Thursday, October 11, 2018, 15:15 – 18:30&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Event Location&lt;/strong&gt;: Workshop Hall 3, Nimhans Convention Center, Bangalore, India&lt;/p&gt;

&lt;p&gt;Open Source India (OSI) is an attempt by the team at Open Source For You magazine in partnership with India’s Open Source community and industry—to bring various stake-holders under one roof. The mission of OSI is simple—to accelerate development and deployment of Open Source in India, and beyond.&lt;/p&gt;

&lt;p&gt;Around 70+ experts shared their knowledge and expertise in this Summit with around 20 Tech Talks and 11 Workshops with 8 different tracks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Workshop&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MONOLITH TO MICRO-SERVICES: A HANDS ON WORKSHOP FOR DEVELOPMENT OF MICRO-SERVICES USING OPEN SOURCE FRAMEWORKS&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/OSI/Title.png&quot; alt=&quot;3&quot; /&gt;
&lt;img src=&quot;/assets/images/OSI/Topics.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;workshop-glimpse&quot;&gt;Workshop Glimpse&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/OSI/OSI-Workshop-1.jpg&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;event-glimpse&quot;&gt;Event Glimpse&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/OSI/OSI-Event-Glimpse.jpg&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Around 70% of the Workshop attendees were already using Microservices in production.&lt;/li&gt;
  &lt;li&gt;Very few people were aware about leading Opensource Microservices framework, most of them were using some commercial Microservices solution.&lt;/li&gt;
  &lt;li&gt;Most of the attendees were not having clear directions of how to choose Opensource frameworks for their specific use cases.&lt;/li&gt;
  &lt;li&gt;Attendees were delighted to know that ServiceComb offers a complete full stack solution for Microservices and is backed by a big opensource community.&lt;/li&gt;
  &lt;li&gt;Most of them were able to understand how to develop microservices using ServiceComb SDK’s.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mohammad Asif Siddiqui</name><email>mohammad.asif.siddiqui1@huawei.com</email><uri>http://asifdxtreme.github.io</uri></author><category term="microservice" /><category term="Meetup" /><summary type="html">OpenSource India Summit: Hands-on Apache ServiceComb(Incubating) MicroServices Workshop</summary></entry><entry xml:lang="en"><title type="html">OpenSource India Summit: Hands-on Apache ServiceComb(Incubating) MicroServices Workshop</title><link href="/docs/osi-microservices/" rel="alternate" type="text/html" title="OpenSource India Summit: Hands-on Apache ServiceComb(Incubating) MicroServices Workshop" /><published>2018-10-15T00:00:00+08:00</published><updated>2018-10-15T10:26:28+08:00</updated><id>/docs/OSI-Workshop-Report</id><content type="html" xml:base="/docs/osi-microservices/">&lt;p&gt;​&lt;strong&gt;Event Date/Time&lt;/strong&gt;: Thursday, October 11, 2018, 15:15 – 18:30&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Event Location&lt;/strong&gt;: Workshop Hall 3, Nimhans Convention Center, Bangalore, India&lt;/p&gt;

&lt;p&gt;Open Source India (OSI) is an attempt by the team at Open Source For You magazine in partnership with India’s Open Source community and industry—to bring various stake-holders under one roof. The mission of OSI is simple—to accelerate development and deployment of Open Source in India, and beyond.&lt;/p&gt;

&lt;p&gt;Around 70+ experts shared their knowledge and expertise in this Summit with around 20 Tech Talks and 11 Workshops with 8 different tracks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Workshop&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MONOLITH TO MICRO-SERVICES: A HANDS ON WORKSHOP FOR DEVELOPMENT OF MICRO-SERVICES USING OPEN SOURCE FRAMEWORKS&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/OSI/Title.png&quot; alt=&quot;3&quot; /&gt;
&lt;img src=&quot;/assets/images/OSI/Topics.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;workshop-glimpse&quot;&gt;Workshop Glimpse&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/OSI/OSI-Workshop-1.jpg&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;event-glimpse&quot;&gt;Event Glimpse&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/OSI/OSI-Event-Glimpse.jpg&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Around 70% of the Workshop attendees were already using Microservices in production.&lt;/li&gt;
  &lt;li&gt;Very few people were aware about leading Opensource Microservices framework, most of them were using some commercial Microservices solution.&lt;/li&gt;
  &lt;li&gt;Most of the attendees were not having clear directions of how to choose Opensource frameworks for their specific use cases.&lt;/li&gt;
  &lt;li&gt;Attendees were delighted to know that ServiceComb offers a complete full stack solution for Microservices and is backed by a big opensource community.&lt;/li&gt;
  &lt;li&gt;Most of them were able to understand how to develop microservices using ServiceComb SDK’s.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mohammad Asif Siddiqui</name><email>mohammad.asif.siddiqui1@huawei.com</email><uri>http://asifdxtreme.github.io</uri></author><category term="microservice" /><category term="Meetup" /><summary type="html">OpenSource India Summit: Hands-on Apache ServiceComb(Incubating) MicroServices Workshop</summary></entry><entry xml:lang="cn"><title type="html">Apache ServiceComb (incubating) Meetup -上海 2018.10.12</title><link href="/cn/docs/Apache-ServiceComb-Meetup-2018-Shanghai/" rel="alternate" type="text/html" title="Apache ServiceComb (incubating) Meetup -上海 2018.10.12" /><published>2018-09-28T00:00:00+08:00</published><updated>2018-09-27T12:26:28+08:00</updated><id>/cn/docs/Apache-ServiceComb-Meetup-2018-Shanghai</id><content type="html" xml:base="/cn/docs/Apache-ServiceComb-Meetup-2018-Shanghai/">&lt;p&gt;&lt;strong&gt;全球最大的开源软件基金会 Apache的大咖们和ServiceComb社区管理委员会成员们齐聚一堂，将从多维度带来干货满满的精彩技术和实践分享&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache ServiceComb Meetup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;会议日期/时间&lt;/strong&gt;：2018 年 10 月 12 日，星期五，13:30–16:50&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;会议地址&lt;/strong&gt;：上海世博展览馆416-417会议厅&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在线直播:&lt;/strong&gt; &lt;a href=&quot;http://www.itdks.com/eventlist/detail/2709&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;关于Apache ServiceComb (incubating) 项目&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;ServiceComb Apache软件基金会孵化项目的主体代码由华为云捐赠，致力于帮助企业轻松构建云原生应用及传统企业业务快速微服务化，通过系列解决方案帮助用户快速开发微服务的同时实现对这些微服务应用的高效运维管理。它具有完整的微服务生态栈，无厂商锁定，当前遵循Apache Way进行孵化，已拥有如消费者云、云EI、云安全、云核等华为业务之外的一批非华为商用用户，且社区和开发者也日趋多样化。&lt;/p&gt;

&lt;p&gt;这是一个免费的开放日Meetup活动，由Apache ServiceComb (incubating)社区组织，华为云赞助主办，我们邀请到了来自商用企业、Apache、ServiceComb社区及华为的多位专家和工程师，与大家进行分享和探讨，详细议题如下：&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;《Apache之道》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;时间：&lt;/strong&gt; 13:30-14:30&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主讲人：&lt;/strong&gt; Roman Shaposhnik，知名企业开源专家及数字转型顾问，曾在Linux基金会下项目的开源协作过程中起了重要作用。并曾在Pivotal负责大数据及应用管理平台领域的工作。Roman 在Pivotal的工作使他深入了解了容器技术、虚拟化以及unikernel架构。此外，Roman 是Apache基金会孵化器的活跃成员，指导了大量的Apache基金会项目并直接参与项目贡献。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主讲人：&lt;/strong&gt; Justin Mclean，Apache项目管理委员会主席，Apache Member，20余年IT行业软件开发经历，擅长IoT, Web 应用开发，数据库设计，开源硬件领域。曾经在全球范围内超过50场会议中进行演讲。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主讲人：&lt;/strong&gt; Craig Russell，Apache Member，Apache IPMC成员，专注于数据库API方向，Sun公司和Oracle公司Java和Javascript中ORM部分架构师。Craig从2005年开始参与Apache基金会的事务，从2010年开始担任Apache Secretary及形象大使。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt; Apache软件基金会是全球最大的开源基金会，目前拥有300多个开源项目，涵盖大数据、云计算、服务器和Web框架、构建管理、内容管理、物联网等众多领域。三位来自Apache基金会的专家将详细介绍Apache基金会发展历程及现状，阐述Apache基金会的运作方式，解读Apache软件基金会的核心理念—Apache Way。同时分析作为一个Apache项目需要遵守的合规性规则及背后所蕴含的意义。并介绍Apache基金会孵化器的概况及项目流程，讨论Apache孵化项目如何发展社区并毕业成为顶级项目。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;《Apache ServiceComb(incubating)社区最新路线》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;时间：&lt;/strong&gt; 14:40-15:00&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主讲人：&lt;/strong&gt; 姜宁，Apache Member，华为微服务领域专家，开源专家，前红帽软件首席软件工程师，有十五年企业级开源中间件开发经验。2006年起一直从事Apache开源中间件项目工作，先后参与Apache CXF， Apache Camel，以及Apache ServiceComb等项目。对微服务架构，WebServices，Enterprise Integration Pattern，SOA， OSGi有比较深入的研究。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt; 介绍ServiceComb社区自1.0.0版本发布之后的整体技术演进路线和项目在Apache软件基金会的最新成长状态。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;《ServiceComb在Service Mesh的探索与思考》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;时间：&lt;/strong&gt; 15:00-15:20&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主讲人：&lt;/strong&gt; 田晓亮，华为云微服务架构师，同时是服务网格的技术带头人。前三星Svoice监控平台架构师，为Svoice执行运维开发解决方案，在PaaS、运维开发和 APM拥有丰富的经验，多次在包括LC3和ArchSummit的开源大会上演讲。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt; 介绍ServiceComb在生态兼容Service Mesh方面的工作，阐述ServiceComb在支持零侵入微服务化方面以及和传统微服务框架实现方式的协同部署、治理的探索。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;《Service Mesh微服务化和传统框架微服务化混合部署协同实践分享》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;时间：&lt;/strong&gt; 15:20-15:40&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主讲人：&lt;/strong&gt; 苗彦杰 梅斯医学首席架构师，多年医疗行业云计算开发经验。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt; 在以Service Mesh为代表的零侵入微服务化发展过程中，如何与传统侵入式框架开发的微服务混合部署、协同治理成为了一道难题。演讲者将从自身的业务背景出发，介绍如何借助ServiceComb和Mesher完成混合部署，分享其中遇到的问题和解决方法。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;《Apache Committer 成长经验分享》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;时间：&lt;/strong&gt; 15:50-16:10&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主讲人：&lt;/strong&gt; 冯征，软件工程师，2009年加入红帽软件公司。主要从事事务管理器方面的工作，Narayan和Blacktie项目的核心开发人员。从2017年开始参与了Apache ServiceComb有关分布式事务部分的实现，利用Byteman等工具完善了异常和超时测试场景。对于分布式事务处理以及微服务环境中的事务处理，有过深入的研究。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt; 作为ServiceComb的新晋PMC和Committer，讲述自己如何在ServiceComb项目中成长的历程，分享自身参与开源社区的经验和收获。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;《快速微服务化编程体验》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;时间：&lt;/strong&gt; 16:10-16:50&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主讲人：&lt;/strong&gt; 巨震，华为软件工程师，Go语言开发者，聚焦云计算、容器技术和DevOps。华为云公有云容器镜像服务核心开发者，当前主要从事华为开源项目开发。《第一本Docker书》的合作译者。热衷于自动化运维、微服务、Service Mesh等技术，曾在Container Days 2017， KubeCon 2017发表演讲。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt; 现场演示如何快速使用ServiceComb Java-chassis和Service Mesh技术Mesher进行微服务化应用编程，结合Kubernetes进行快速部署，并和与会者互动练习。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如您需要在参加Meetup之余参观ServiceComb展台，请您加入ServiecComb Gitter聊天室咨询：&lt;/strong&gt;   &lt;br /&gt;
&lt;strong&gt;&lt;a href=&quot;https://gitter.im/ServiceCombUsers/Lobby&quot;&gt;ServiceComb Gitter 聊天室&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Dean Lee</name></author><category term="微服务" /><category term="Meetup" /><summary type="html">Apache ServiceComb (incubating) Meetup</summary></entry><entry xml:lang="en"><title type="html">Apache ServiceComb (incubating) Meetup -Shanghai 2018.10.12</title><link href="/docs/Apache-ServiceComb-Meetup-2018-Shanghai/" rel="alternate" type="text/html" title="Apache ServiceComb (incubating) Meetup -Shanghai 2018.10.12" /><published>2018-09-28T00:00:00+08:00</published><updated>2018-09-30T10:26:28+08:00</updated><id>/docs/Apache-ServiceComb-Meetup-2018-Shanghai</id><content type="html" xml:base="/docs/Apache-ServiceComb-Meetup-2018-Shanghai/">&lt;p&gt;&lt;strong&gt;Apache ServiceComb Meetup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meeting Date/time:&lt;/strong&gt; Friday, October 12, 2018, 13:30-16:50 PM&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meeting Address:&lt;/strong&gt;Shanghai World Expo Exhibition &amp;amp; Convention Center, &lt;strong&gt;Room 416-417&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live Online:&lt;/strong&gt; &lt;a href=&quot;http://www.itdks.com/eventlist/detail/2709&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;《The Apache Way》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt;13:30-14:30&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; The Apache Software Foundation (ASF) is the world’s largest open source foundation with more than 300 open source projects, covering big data, cloud computing, servers and web frameworks, build management, content management, IoT, and more areas. Three experts from ASF will talk about the history and development of the ASF, its operation model, and will elaborate on the core ideas of the ASF – The Apache Way.This session will also cover the compliance rules and their meanings for Apache projects. And introduce the Apache Incubator project and its standard procedures. The presenter will talk about how open-source projects can develop into communities through the Apache Incubator project, and how these projects can eventually become top projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker:&lt;/strong&gt; Roman Shaposhnik is a renowned expert and consultant in corporate OpenSource and Digital Transformation. He serves on Apache Software Foundation board of directors. In the past, Roman played a key role in shaping the Open Source collaboration under the umbrella of Linux Foundation and held leadership roles at Pivotal focusing on big data and application management platforms. His work at Pivotal brought him to the nexus between container technologies, virtualization and unikernel architectures. He is an active member of Apache Software Foundation’s Incubator where he mentors and directly contributes to a wide range of Apache Software Foundation projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker:&lt;/strong&gt; Justin Mclean, chairman of the Apache IPMC, and an Apache member; more than 20 years of experience in IT software development, areas of expertise include IoT, web-based application development, database design, and open source hardware; has spoken at more than 50 conferences worldwide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker:&lt;/strong&gt; Craig Russell, an Apache member and Apache IPMC member, specialized in database APIs, Java and JavaScript ORM architect for Sun and Oracle. Craig joined the Apache Software Foundation in 2005 and has been the Apache Secretary and ambassador since 2010.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;《Latest Roadmap of the Apache ServiceComb(incubating) Community》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 14:40-15:00&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; This session will introduce the overall evolutionary roadmap of technology for the ServiceComb project and its latest development within the Apache Software Foundation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker:&lt;/strong&gt; Jiang Ning, an Apache member, Huawei microservices expert, open source expert, former principle engineer of Red Hat, has 15 years of experience in developing enterprise-class open source middleware. He is engaged in Apache open-source middleware projects since 2006, including Apache CXF, Apache Camel, and Apache ServiceComb; and in-depth research on microservices architectures, Web Services, Enterprise Integration Patterns, SOA, and OSGi.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;《ServiceComb’s Exploration of Service Mesh》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 15:00-15:20&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; This session will introduce the efforts made by ServiceComb to stay compatible with the Service Mesh ecosystem. The presenter will talk about ServiceComb’s exploration into hybrid deployment and governance of non-intrusive microservices and those based on a traditional architecture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker :&lt;/strong&gt; Tian Xiaoliang is a HUAWEI CLOUD microservices architect and a leader of Service Mesh technology. He was the former monitoring platform architect for SVoice of Samsung, worked on O&amp;amp;M and development solutions for SVoice. He has rich experience in PaaS, O&amp;amp;M and development, and APM; has spoken at multiple open source conferences including LC3 and ArchSummit.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;《Practice Sharing: Hybrid Deployment of Service Mesh-based Microservices and Those Based on a Traditional Architecture》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 15:20-15:40
&lt;strong&gt;Summary:&lt;/strong&gt; Harmonizing non-intrusive microservices (Service Mesh being a shining example) with those based on traditional architectures to enable hybrid deployment and collaborated governance is no easy task. By drawing on practices from his own industry, the presenter will talk about how to use ServiceComb and Mesher to enable hybrid microservices deployment using different architectures, problems encountered, and some solutions to them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker :&lt;/strong&gt; Miao Yanjie is the chief architect in MedSci and has years of experience in cloud computing development for the healthcare industry.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;《Journey to Becoming an Apache Committer》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 15:50-16:10&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; As a new PMC (Project Management Committee) member and committer to ServiceComb, the presenter will talk about his own experience participating in the ServiceComb project, lessons learned and achievements made.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker:&lt;/strong&gt; Feng Zheng, a software engineer, joined Red Hat Software in 2009. He is specialized in transaction manager; and is one of the core developers for Narayan and Blacktie projects. He worked on implementation of the distributed transaction part of Apache ServiceComb since 2017; optimized exception and timeout test scenarios by using tools like Byteman. He has in-depth research on distributed transaction processing and transaction processing in microservice environments.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;《Hands-on Experience with Fast Microservices Programming》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 16:10-16:50&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; The presenter will demonstrate how to use ServiceComb Java Chassis and Mesher of Service Mesh to quickly program microservices applications, and how to quickly deploy them by using Kubernetes. Audience can gain some hands-on experiences at the same time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaker:&lt;/strong&gt; Ju Zhen, a Huawei software engineer and Go language developer, is specialized in cloud computing, container technology, and DevOps. He is one of the core developers of container image services for HUAWEI CLOUD, and is mainly engaged in Huawei open source project development. He is a co-translator of The Docker Book and is an advocate of technologies like O&amp;amp;M automation, microservices, and Service Mesh. He gave speeches at Container Days 2017 and KubeCon 2017.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Please checkout ServiceComb Gitter if you are interesting about visiting the booth of ServiceComb during the Meetup&lt;/strong&gt;
&lt;strong&gt;&lt;a href=&quot;https://gitter.im/ServiceCombUsers/Lobby&quot;&gt;ServiceComb Gitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Dean Lee</name></author><category term="microservice" /><category term="Meetup" /><summary type="html">Apache ServiceComb (incubating) Meetup</summary></entry><entry xml:lang="cn"><title type="html">使用Kubernetes对Saga进行压力测试</title><link href="/cn/docs/loadtest-saga-with-kubernetes" rel="alternate" type="text/html" title="使用Kubernetes对Saga进行压力测试" /><published>2018-09-11T00:00:00+08:00</published><updated>2018-09-11T10:26:28+08:00</updated><id>/cn/docs/loadtest-saga-with-kubernetes</id><content type="html" xml:base="/cn/docs/loadtest-saga-with-kubernetes">&lt;h2 id=&quot;使用kubernetes对saga进行压力测试&quot;&gt;使用Kubernetes对Saga进行压力测试&lt;/h2&gt;

&lt;p&gt;Apache ServiceComb (incubating) Saga 是一个微服务应用的数据最终一致性解决方案。Saga在try阶段直接提交事务，后续rollback阶段则通过反向的补偿操作来完成。&lt;/p&gt;

&lt;p&gt;基于ServiceComb Saga的项目，基本的构架如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/apache/incubator-servicecomb-saga/master/docs/static_files/pack.png&quot; alt=&quot;overview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在我们的Saga实现中，业务服务引入Omega库，通过Omega将事务相关信息作为事件发送给Alpha server，由Alpha server统一进行协调。Alpha server将事务保存在PostgreSQL中，后台定期进行扫描。当扫描到异常事件时，尝试向事件对应的Omega发送gRPC请求，调用补偿方法。由于在原生业务中加入了Omega，进行了一系列后台操作，因此需要对整个框架进行压力测试，以获取框架的基础性能报告。&lt;/p&gt;

&lt;p&gt;在Cloud Native时代，容器几乎是标准的部署形态，应用程序容器化之后，通过Kubernetes进行容器编排，可以轻松的实现弹性扩容、任务调度等，非常适合对该项目进行压力测试。有鉴于此，我们将demo项目构建成docker镜像，并部署到Kubernetes集群中，通过Kubernetes的一系列组件，对demo方便的进行压力测试，以对Saga项目的性能有一个初步的评估。&lt;/p&gt;

&lt;h3 id=&quot;kubernetize服务&quot;&gt;“Kubernetize”服务&lt;/h3&gt;

&lt;p&gt;我们的demo项目由Java编写、maven作为依赖管理工具，在项目中引入了fabric8插件，编译程序时可以顺便将jar包构建成docker镜像。首先，我们构建alpha-server镜像：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;alpha/alpha-server
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mvn clean install -Pdocker
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后进入demo项目路径&lt;code class=&quot;highlighter-rouge&quot;&gt;saga-demo/saga-spring-demo&lt;/code&gt;，执行相同的maven构建命令，构建完成后，我们可以看到产生了4个相关镜像：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker images | grep SNAPHOST  &lt;span class=&quot;c&quot;&gt;# {version}-SNAPSHOT是构建过程中使用的镜像标签&lt;/span&gt;
alpha-server:0.3.0-SNAPSHOT
booking:0.3.0-SNAPSHOT
car:0.3.0-SNAPSHOT
hotel:0.3.0-SNAPSHOT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至此，我们已经构建好所需镜像，下一步便是编写Kubernetes所需的资源文件，这一步我们不再赘述，项目中已经有写好的yaml文件，路径在&lt;code class=&quot;highlighter-rouge&quot;&gt;saga-demo/saga-k8s-resources&lt;/code&gt;，目录结构如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-base&quot;&gt;.
├── base
│   ├── alpha.yaml
│   ├── jmeter-collector.yaml
│   └── postgresql.yaml
├── README.md
└── spring-demo
    ├── booking.yaml
    ├── car.yaml
    ├── hotel.yaml
    └── test
        ├── jmeter.configmap.yaml
        └── jmeter.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt;目录包含了alpha-server，postgresql以及用于收集测试报告的jmeter-collector3个服务。&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-demo&lt;/code&gt;目录包含了demo项目的所有服务，&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-demo/test&lt;/code&gt;路径下包含了对demo测试所需的服务。&lt;/p&gt;

&lt;p&gt;我们通过最基础的deployment和service对项目进行部署，程序之间通过域名互相访问，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;命令对Kubernetes资源进行部署：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl create ns servicecomb &lt;span class=&quot;c&quot;&gt;# 默认所有服务都在servicecomb namespace下&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl apply -f ./base
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl apply -f ./spring-demo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们通过&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl exec&lt;/code&gt;命令进入一个pod，通过curl命令测试booking程序：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -it -n servicecomb alpha-server-xxxxx
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl http://booking.servicecomb:8083/booking/test/2/2
resp: OK
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至此，我们的demo项目就已经运行起来了。&lt;/p&gt;

&lt;h3 id=&quot;部署jmeter&quot;&gt;部署JMeter&lt;/h3&gt;

&lt;p&gt;我们选用&lt;a href=&quot;https://jmeter.apache.org/&quot;&gt;JMeter&lt;/a&gt;作为压测工具，&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;上已有公共镜像&lt;a href=&quot;https://hub.docker.com/r/justb4/jmeter/&quot;&gt;justb4/jmeter&lt;/a&gt;，该镜像比较成熟，启动前会先侦测系统中可用内存，按照一定比例为jmeter申请jvm内存，可以最大化、合理的利用系统资源。&lt;/p&gt;

&lt;p&gt;当我们部署JMeter时，为了保持测试的灵活性，一般需要将JMeter脚本单独存储，而JMeter程序可以通过某种方式获取测试脚本，进而保证测试配置可以单独修改，不需要重新构建JMeter镜像。在Kubernetes中，我们可以将JMeter的配置文件存放于&lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/&quot;&gt;ConfigMap&lt;/a&gt;，并通过&lt;a href=&quot;https://kubernetes.io/docs/concepts/storage/volumes/&quot;&gt;VolumeMount&lt;/a&gt;挂载到JMeter容器的指定目录，这样，当我们需要修改测试配置时，只需修改ConfigMap，并重新部署JMeter deployment，即可完成配置的更新。&lt;/p&gt;

&lt;p&gt;部署ConfigMap命令如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl apply -f spring-demo/test/jmeter.configmap.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;jmeter-镜像改造&quot;&gt;JMeter 镜像改造&lt;/h3&gt;

&lt;p&gt;由于原有的JMeter容器执行完测试之后就退出了，如果在单机环境、仅运行docker容器的环境下，我们可以在执行&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;命令时通过-v参数将宿主机目录挂载到容器中，以保存测试的结果。但是Kubernetes环境，每个pod部署时都是根据一定的算法分配到不同节点上的，节点即是容器的宿主机。但是，登录到节点并找到相应目录来查看结果似乎是非常“不体面”的姿势，因此需要构建一个服务，收集JMeter生成的报告，并能够方便的展示。为此，我们用go语言实现了一个简单的文件上传服务，并附带静态文件服务。该服务收到JMeter测试报告达成的tgz压缩包，将其解压到相应静态文件服务目录中，这样，我们就可以方便的在集群中查看测试结果。该服务就是上文提到的jmeter-collector服务。&lt;/p&gt;

&lt;p&gt;这样一来，我们还需要对JMeter服务进行一些小改造，当执行完JMeter测试后，我们通过一个脚本将测试结果目录打包上传到jmeter-collector服务。这些改造都已经完成并做好了相应的镜像，直接使用项目中的资源即可：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl apply -f spring-demo/test/jmeter.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在，我们已经配置好JMeter相关资源，执行&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl logs&lt;/code&gt;检查JMeter运行状况：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get pod -n servicecomb | grep spring-demo-jmeter
spring-demo-jmeter-xxxxx
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl logs -f -n servicecomb pring-demo-jmeter-xxxxx
...
summary +    420 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;00:00:22 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   18.8/s Avg:   214 Min:   111 Max:   471 Err:   207 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;49.29%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Active: 12 Started: 12 Finished: 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到JMeter已经开始逐步增加测试线程进行压测了。&lt;/p&gt;

&lt;p&gt;由于我们用deployment部署JMeter，当执行结束后，容器正常退出，Kubernetes会重新启动容器，将测试服务再次拉起。因此测试会持续进行，直到我们将deployment删除。&lt;/p&gt;

&lt;p&gt;至此，我们已经完成了demo和相应的压力测试服务，整个集群中相关资源的结构如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/crystaldust/incubator-servicecomb-website/raw/blogs/loadtest-saga-with-k8s/assets/images/spring-demo.jpg&quot; alt=&quot;demo-and-test-arch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JMeter服务通过ConfigMap读取测试脚本，然后对booking服务发起压力测试，测试结束后，将结果上传至jmeter-collector服务。&lt;/p&gt;

&lt;h3 id=&quot;查看测试结果&quot;&gt;查看测试结果&lt;/h3&gt;

&lt;p&gt;JMeter容器运行完成后，在容器内生成了测试结果文件，并调用upload脚本打包上传到jmeter-collector服务，可以通过该服务直接在页面上查看结果。在Kubernetes中，在集群外部访问服务有两种方式：LoadBalancer或NodePort，前者一般由提供Kubernetes集群服务的云服务厂商提供，后者则可以通过节点的IP和端口来访问某个服务。由于我们使用了本地部署的Kubernetes集群，因此我们使用NodePort来查看访问结果。&lt;/p&gt;

&lt;p&gt;首先，调用&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl edit&lt;/code&gt;命令，编辑jmeter-collector服务：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl edit svc -n servicecomb jmeter-collector
&lt;span class=&quot;c&quot;&gt;# in the editor:&lt;/span&gt;
spec:
  &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: NodePort &lt;span class=&quot;c&quot;&gt;## 插入此行，注意yaml文件空格缩进&lt;/span&gt;
  exteranlIPs: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.43.70&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## 插入此行，根据Kubernetes集群中节点IP来设置&lt;/span&gt;
  ports:
  - port: 80
  targetPort: 8883
  &lt;span class=&quot;c&quot;&gt;#....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在笔者的环境中，制定了IP为192.168.43.70的节点作为NodePort的IP，对外暴露80端口，因此，在浏览器中直接访问&lt;code class=&quot;highlighter-rouge&quot;&gt;http://192.168.43.70&lt;/code&gt;即可查看测试报告的结果了，结果如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/crystaldust/incubator-servicecomb-website/raw/blogs/loadtest-saga-with-k8s/assets/images/jmeter-collector.png&quot; alt=&quot;jmeter-collector-dashboard&quot; /&gt;&lt;/p&gt;</content><author><name>Zhen Ju</name><email>juzhenatpku@gmail.com</email><uri>https://github.com/crystaldust</uri></author><category term="microservice" /><category term="servicemesh" /><category term="saga" /><summary type="html">如何使用Kubernetes方便的对Saga进行性能测试</summary></entry><entry xml:lang="cn"><title type="html">客户管理系统微服务化实战-PartI</title><link href="/cn/docs/crm-part-I/" rel="alternate" type="text/html" title="客户管理系统微服务化实战-PartI" /><published>2018-08-28T00:00:00+08:00</published><updated>2018-08-28T10:00:00+08:00</updated><id>/cn/docs/crm-part-I</id><content type="html" xml:base="/cn/docs/crm-part-I/">&lt;h2 id=&quot;客户管理系统微服务化实战-parti&quot;&gt;客户管理系统微服务化实战-PartI&lt;/h2&gt;
&lt;h2 id=&quot;ddd场景极速开发&quot;&gt;——DDD、场景、极速开发&lt;/h2&gt;

&lt;p&gt;在今年的LC3大会上，ServiceComb展台所展示的demo视频&lt;code class=&quot;highlighter-rouge&quot;&gt;“30分钟开发雏形CRM应用”&lt;/code&gt;引起了参会者的广泛关注，大家纷纷对其背后的技术表现出浓厚的兴趣。本文将从房地产企业的客户管理管理场景入手，使用领域驱动设计，深入技术细节，详解如何快速开发落地一个微服务化的客户管理系统。&lt;/p&gt;

&lt;h1 id=&quot;1-牛刀小试&quot;&gt;1. 牛刀小试&lt;/h1&gt;
&lt;p&gt;打开浏览器，输入地址&lt;code class=&quot;highlighter-rouge&quot;&gt;http://start.servicecomb.io/&lt;/code&gt;打开SERVICECOMB SPRING INITIALIZR，修改Project Metadata中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Group&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Artifact&lt;/code&gt;和ServiceComb Parameters中的&lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceCenter Address&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Governance&lt;/code&gt;等，点击Generate Project，解压生成下载的demo.zip。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/StartServiceComb.io.png&quot; alt=&quot;SERVICECOMB SPRING INITIALIZR截图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;运行它也很简单，使用IDE打开项目，DEBUG -&amp;gt; Application.java，或在命令行：&lt;/p&gt;

&lt;p&gt;稍等微服务启动就绪，打开浏览器输入&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:9080/hello&lt;/code&gt;验证一下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/OutputHello.png&quot; alt=&quot;输出hello截图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是不是非常轻松呢？&lt;/p&gt;

&lt;h1 id=&quot;2-脚手架&quot;&gt;2. 脚手架&lt;/h1&gt;
&lt;p&gt;在建筑领域，脚手架是施工现场为方便工人操作并解决垂直和水平运输而搭设的各种支架以及平台。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/Scaffold.jpg&quot; alt=&quot;scaffold&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在软件开发领域，它引申为预提供一些基础框架代码加速开发过程，避免从零开始构建项目。用户只需要依据需求场景选择合适的脚手架，然后填充定制的业务逻辑即可，不必再去处理一些基础功能，例如数据库连接、日志实现、RPC传输等。&lt;/p&gt;

&lt;p&gt;微服务框架一般都会提供脚手架功能，例如Spring，提供了SPRING INITIALIZR；ServiceComb基于SPRING INITIALIZR，提供了更具优势的特性：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;生成的项目除了在POM中自动添加必要的依赖，还会提供Producer和Consumer示例代码（Hello World）；&lt;/li&gt;
  &lt;li&gt;会进一步提供&lt;strong&gt;Edge Server&lt;/strong&gt;、&lt;strong&gt;Authcation Server&lt;/strong&gt;等更贴近业务的脚手架项目，让用户能快速构建体系完整的微服务系统。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那么什么叫一个完整的微服务系统呢？我们可以拿一个具体的场景做例子，会更有感觉：&lt;/p&gt;

&lt;h1 id=&quot;3-场景地产crm&quot;&gt;3. 场景：地产CRM&lt;/h1&gt;
&lt;p&gt;您经营着一家房地产开发商，销售房产，迫切需要一套销售系统，考虑到微服务的优势，您决定使用微服务的方式构建系统；主要的业务流程也非常简单：用户前来购买购买产品（房产），首先需要登记用户信息，并缴纳一定数量的定金，待交易当日，挑选心仪的产品（房产），支付尾款，完成交易。&lt;/p&gt;

&lt;h2 id=&quot;31--使用ddd指导地产crm系统的设计&quot;&gt;3.1  使用DDD指导地产CRM系统的设计&lt;/h2&gt;
&lt;p&gt;微服务系统的设计方面，领域驱动设计（Domain-Driven Design，DDD）是一个从业务出发的好选择，它由Eric Evans提出，是一种全新的系统设计和建模方法，这里的模型指的就是领域模型（Domain Model）。领域模型通过聚合（Aggregate）组织在一起，聚合间有明显的业务边界，这些边界将领域划分为一个个限界上下文（Bounded Context）。Martin Fowler对它们都有详细的&lt;a href=&quot;https://martinfowler.com/tags/domain%20driven%20design.html&quot;&gt;解读&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;理论概念都搞清楚了，那么怎么来找模型和聚合呢？一个非常流行的方法就是&lt;a href=&quot;https://en.wikipedia.org/wiki/Event_storming&quot;&gt;Event Storming&lt;/a&gt;，它是由Alberto Brandolini发明，经历了DDD社区和很多团队的实践，也是一种非常有参与感的团队活动：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/EventStorming.png&quot; alt=&quot;EventStorming&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图就是我们对地产CRM这个场景使用Event Storming探索的结果，现在我们能够将限界上下文清晰的梳理出来：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/BoundedContext.png&quot; alt=&quot;BoundedContext&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;提示：Event Storming是一项非常有创造性的活动，也是一个持续讨论和反复改进的过程，不同的团队关注的核心域（Core Domain）不同，得到的最终结果也会有差异。我们的目的是为了演示完整的微服务系统构建的过程，并不涉及商业核心竞争力方面的探讨，因此没有Core Domain和Sub Domain之类的偏重。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;32-将分析成果转化为方案域设计&quot;&gt;3.2 将分析成果转化为方案域设计&lt;/h2&gt;
&lt;p&gt;当我们完成所有的限界上下文的识别后，可以直接将它们落地为微服务：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/MicroserviceDesign1.png&quot; alt=&quot;MicroserviceDesign1&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用户服务：提供用户信息管理服务，这里保存这用户的账号和密码，负责登录和认证；&lt;/li&gt;
  &lt;li&gt;产品（房产）服务：提供产品管理服务，保存着房产的信息诸如价格、是否已售出等信息；&lt;/li&gt;
  &lt;li&gt;支付服务：提供交易时支付服务，模拟对接银行支付定金，以及购房时支付尾款；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于完成一笔交易是一个复杂的流程，与这三个微服务都有关联，因此我们引入了一个复合服务——交易服务：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/MicroserviceDesign2.png&quot; alt=&quot;MicroserviceDesign2&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;交易服务：提供产品交易服务，它通过编排调用将整个交易流程串起来,交易服务中有两个流程：
    &lt;ul&gt;
      &lt;li&gt;定金支付&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Step1：通过用户服务验证用户身份；&lt;/p&gt;

    &lt;p&gt;Step2：通过支付服务请求银行扣款，增加定金账号内的定金；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;购房交易&lt;/p&gt;

    &lt;p&gt;Step1：通过用户服务验证用户身份；&lt;/p&gt;

    &lt;p&gt;Step2：通过资源服务确定用户希望购买的资源（房产）尚未售出；&lt;/p&gt;

    &lt;p&gt;Step3：通过资源服务标记目标资源（房产）已售出；&lt;/p&gt;

    &lt;p&gt;Step4：通过支付服务请求扣减定金账号内的定金，以及银行扣剩下的尾款；&lt;/p&gt;

    &lt;p&gt;最后两个步骤需要保证事务一致性，其中Step4包含两个扣款操作。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之后，我们引入Edge服务提供统一入口：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/MicroserviceDesign3.png&quot; alt=&quot;MicroserviceDesign3&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Edge服务：很多时候也被称为API网关（API Gateway），负责集中认证、动态路由等等；&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;提示：Edge服务需要依赖服务注册-发现机制，因此同时导入了ServiceCenter。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最后还需要提供UI：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/MicroserviceDesign4.png&quot; alt=&quot;MicroserviceDesign4&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;前端UI（同样以微服务方式提供）：用户交互界面；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;至此，DDD设计地产CRM的工作就结束了。&lt;/p&gt;

&lt;h1 id=&quot;4-快速实现客户关系管理系统的用户服务&quot;&gt;4. 快速实现客户关系管理系统的用户服务&lt;/h1&gt;
&lt;h2 id=&quot;41-用户微服务并不简单&quot;&gt;4.1 用户微服务并不简单&lt;/h2&gt;
&lt;p&gt;用户微服务是所有系统中不可或缺的部分，它承载了认证和授权等核心功能——无论是登录一个网站、还是打开一个APP，当涉及到需要身份识别后才能够执行的操作，都需要用户微服务把关。例如观看视频网站上的视频，匿名用户会插播广告，如果希望屏蔽广告，则需要登录并购买VIP会员，登录即是身份认证的过程，而VIP屏蔽广告即是授权的过程。&lt;/p&gt;

&lt;h5 id=&quot;认证&quot;&gt;认证&lt;/h5&gt;
&lt;p&gt;认证不仅仅是一次性验证用户名和密码的过程，还需要能反复使用认证的结果，确保后继所有操作都是合法的，这就涉及到“有状态”，但HTTP是一个无状态协议，如何能够将登录成功后的认证信息与后继的请求关联起来呢？&lt;/p&gt;

&lt;p&gt;我们非常熟悉的做法是使用Session或Cookie：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Session存储在服务端，因此具备良好的防篡改能力，但弊端是使服务有状态，微服务系统中，同一个微服务会依据系统压力的大小弹性伸缩出多个运行实例负载均衡，跨实例访问会状态丢失。&lt;/li&gt;
  &lt;li&gt;Cookie存储在客户端，它正好与Session相反，优势是服务不必保持状态，但弊端是客户比较容易的篡改Cookie信息，例如修改过期时间以逃避验证，而且浏览器对Cookie也有较多限制。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么，如何兼顾这两方面的需求呢？Token就是一个比较好的解决方案。&lt;/p&gt;

&lt;p&gt;Token中文翻译为令牌，它将登录认证后的信息签名后返回，服务端不保存，客户端请求的时候将认证的完整信息附带上提供给服务端验签，签名可以保证信息不被篡改。了解了了解Token的原理，自然要关注Token的格式，JWT就是这样一个基于JSON的开放标准&lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot;&gt;RFC-7519&lt;/a&gt;。&lt;/p&gt;

&lt;h6 id=&quot;jwt-java-web-token规范&quot;&gt;JWT （Java Web Token）规范&lt;/h6&gt;
&lt;p&gt;简而言之JWT规范由三部分构成：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Header： 声明Token的类型也就是JWT，以及加密算法，例如：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;typ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;JWT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;alg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HS256&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Playload：存放有效信息，既包含标准签发者、用户、签发时间、过期时间，唯一标识等信息；也可以存放用户自定义的声明信息，例如权限控制相关的内容，例如：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;sub&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1234567890&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YangYong Zheng&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;iat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1516239022&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Signature：签名信息，包含Header和Playload的原始信息（Base64编码过）以及签名过后的信息。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;提示：JWT IO提供了&lt;a href=&quot;https://jwt.io/&quot;&gt;在线编码和解码工具&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;授权&quot;&gt;授权&lt;/h5&gt;
&lt;p&gt;授权的本意是指将完成某项工作所必须的权力授给下属人员，在软件系统中往往引申为使人或角色具备访问特定资源或更改行为的许可。例如之前提到的VIP屏蔽广告，即是视频网站允许播放终端在特定的帐号登录后跳过广告播放环节（行为）的许可。&lt;/p&gt;

&lt;p&gt;授权系统比较常见的做法有ACL和RBAC：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ACL：ACL全称Access Control List，它是以受控资源为核心，每一个受控资源，都有一个权限控制列表记录哪些用户或角色对这项资源执行具体操作（也被称为授权点）的权限设置，例如查询（可见）、修改、删除等等。Windows中的文件系统安全即是一个经典的ACL实现案例：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/ACL.png&quot; alt=&quot;ACL&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RBAC：RBAC全称Role Based Access Control，与ACL相比，它以角色为核心，权限落地在角色上，不为特定用户授权。它的优势是大幅简化了用户与权限的管理，在受控对象不多或控制粒度要求不高（例如接口访问控制）的场景下非常适用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/RBAC.png&quot; alt=&quot;RBAC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于微服务系统的权限控制主要是接口访问控制上，并且多采用用户组方式组织用户，因此RBAC是比较流行的做法。&lt;/p&gt;

&lt;h2 id=&quot;42-实现用户微服务&quot;&gt;4.2 实现用户微服务&lt;/h2&gt;
&lt;h5 id=&quot;第一步创建微服务项目&quot;&gt;第一步：创建微服务项目&lt;/h5&gt;
&lt;p&gt;使用SERVICECOMB SPRING INITIALIZR创建用户微服务，创建完毕后使用IDEA或Eclipse打开项目，我们删掉HelloImpl和HelloConsumer，之后添加自己的实现。&lt;/p&gt;

&lt;h5 id=&quot;第二步使用mysql持久化用户信息&quot;&gt;第二步：使用MySQL持久化用户信息&lt;/h5&gt;
&lt;p&gt;用户微服务需要持久化用户信息，我们使用MySQL数据库，ORM使用Spring Data JPA：&lt;/p&gt;
&lt;h6 id=&quot;引入依赖&quot;&gt;引入依赖&lt;/h6&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;mysql&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h6 id=&quot;定义存储user信息的userentity实体&quot;&gt;定义存储User信息的UserEntity实体&lt;/h6&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;T_User&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserEntity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在CodeFist模式下，Spring Data JPA会在数据库中自动创建T_User表与此实体映射。&lt;/p&gt;

&lt;h6 id=&quot;实现userentity实体的repository&quot;&gt;实现UserEntity实体的Repository&lt;/h6&gt;
&lt;p&gt;我们继承JPA的PagingAndSortingRepository来实现ORM操作&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Repository&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PagingAndSortingRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;UserEntity&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;配置数据库连接&quot;&gt;配置数据库连接&lt;/h6&gt;
&lt;p&gt;在项目的&lt;code class=&quot;highlighter-rouge&quot;&gt;resources&lt;/code&gt;目录下新增&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt;文件，写入数据库连接信息：&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;spring.datasource.url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;jdbc:mysql://localhost:3306/user_db?useSSL=false&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;spring.datasource.username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;spring.datasource.password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pwd&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;spring.jpa.hibernate.ddl-&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;update&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;spring.jpa.properties.hibernate.dialect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;org.hibernate.dialect.MySQL5Dialect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;提示：关于Spring Data JPA的更多资料请参见&lt;a href=&quot;https://projects.spring.io/spring-data-jpa/&quot;&gt;这篇文档&lt;/a&gt;，为了能够简化依赖的引入我们实际上使用的是Spring Boot JPA Starter，详细的例子请参见&lt;a href=&quot;https://spring.io/guides/gs/accessing-data-jpa/&quot;&gt;这篇文档&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;第三步实现jwt认证&quot;&gt;第三步：实现JWT认证&lt;/h5&gt;
&lt;h6 id=&quot;定义jwt接口&quot;&gt;定义JWT接口&lt;/h6&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TokenStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;generate用于生成Token，validate用于验证Token是否正确。&lt;/p&gt;

&lt;h6 id=&quot;实现tokenstore&quot;&gt;实现TokenStore&lt;/h6&gt;
&lt;p&gt;我们使用&lt;a href=&quot;https://github.com/jwtk/jjwt&quot;&gt;jjwt&lt;/a&gt;提供的JWT实现，创建JwtTokenStore类，继承TokenStore接口，并重写方法：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JwtTokenStore&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TokenStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOGGER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JwtTokenStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondsToExpire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JwtTokenStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;secretKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;someSecretKeyForAuthentication&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;secondsToExpire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JwtTokenStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondsToExpire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;secretKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;secondsToExpire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondsToExpire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jwts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setExpiration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZonedDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plusSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondsToExpire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toInstant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HS512&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Jwts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSigningKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClaimsJws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JwtException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IllegalArgumentException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;LOGGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;validateToken token : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; failed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;第四步实现用户服务&quot;&gt;第四步：实现用户服务&lt;/h5&gt;
&lt;h6 id=&quot;定义userservice接口&quot;&gt;定义UserService接口&lt;/h6&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;logon用于新用户注册，login用于用户登录验证，UserDTO用于参数传递：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;实现并发布userservice&quot;&gt;实现并发布UserService&lt;/h6&gt;
&lt;p&gt;创建UserServiceImpl，继承&lt;code class=&quot;highlighter-rouge&quot;&gt;UserService&lt;/code&gt;接口：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestSchema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schemaId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TokenStore&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TokenStore&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tokenStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;logon&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validateUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;UserEntity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UserEntity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvocationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user name had exist&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvocationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;incorrect user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validateUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;UserEntity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;HttpHeaders&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateAuthenticationHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;//add authentication header&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvocationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wrong password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvocationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user name not exist&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvocationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;incorrect user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validateUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpHeaders&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateAuthenticationHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpHeaders&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUTHORIZATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;登录成功后，会从TokenStore生成Token，并将其写入Key为&lt;code class=&quot;highlighter-rouge&quot;&gt;AUTHORIZATION&lt;/code&gt;的Header。&lt;/p&gt;

&lt;p&gt;由于我们允许任何用户注册和登录，所以目前还没有授权的需求，经过上面四步，具有基本注册和登录功能的用户微服务就构建好了。&lt;/p&gt;

&lt;h2 id=&quot;43-验证实现的用户服务&quot;&gt;4.3 验证实现的用户服务&lt;/h2&gt;
&lt;p&gt;启动用户微服务，我们先注册一个账号：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/TestLogon.png&quot; alt=&quot;TestLogon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;显示注册成功，现在我们使用这个账号登录：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/TestLogin.png&quot; alt=&quot;TestLogin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;返回登录成功，Response中已经包含了&lt;code class=&quot;highlighter-rouge&quot;&gt;AUTHORIZATION&lt;/code&gt;Header，后继的所有请求都需要使用这个Token值进行合法认证。&lt;/p&gt;

&lt;p&gt;至此，实现客户关系管理系统的用户服务工作就结束了，现在我们会将目光转移到Edge服务，通过Edge服务作为微服务调用的统一入口，在它之上构建统一认证，应对海量级调用的挑战。&lt;/p&gt;

&lt;h1 id=&quot;5-开发高性能边缘服务&quot;&gt;5 开发高性能边缘服务&lt;/h1&gt;
&lt;h2 id=&quot;51-什么是边缘服务edge-service&quot;&gt;5.1 什么是边缘服务（Edge Service）&lt;/h2&gt;
&lt;p&gt;边缘服务也是一个微服务，微服务化系统通常使用边缘服务（Edge Service）作为所有其它微服务的统一入口，因此它也常常会被称为API Gateway，使用边缘服务的好处有如下几点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;动态路由：动态配置URL地址与微服务之间的对应关系，便于扩展，以及实现版本灰度发布等；&lt;/li&gt;
  &lt;li&gt;统一认证：在入口处进行访问认证，避免需要在所有的微服务中都承载重复的认证机制；&lt;/li&gt;
  &lt;li&gt;集中监控：与统一认证类似，在边缘服务对入口调用进行监控，容易统计流量信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;52-边缘服务的作用和原理&quot;&gt;5.2 边缘服务的作用和原理&lt;/h2&gt;
&lt;p&gt;我们先来看不使用边缘服务，UI直接调用用户服务的场景：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/DirectInvoke.png&quot; alt=&quot;DirectInvoke&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出这种调用方式，UI缺乏一定的灵活性，体现在：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;UI的实现绑定了Chassis的编程语言Java，无法使用PHP等其它前端技术开发；&lt;/li&gt;
  &lt;li&gt;UI访问微服务的路径无法动态配置，如果作为后端的微服务系统发生调整，则UI很可能需要修改；&lt;/li&gt;
  &lt;li&gt;UI很容易混入复合（编排）调用的逻辑，使得结构变得复杂难以维护。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们再看引入边缘服务后，UI如何通过边缘服务调用用户服务：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/InvokeViaEdge.png&quot; alt=&quot;InvokeViaEdge&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Edge服务将在&lt;code class=&quot;highlighter-rouge&quot;&gt;9090&lt;/code&gt;端口上接受http rest调用，我们设计了下面的转发规则：&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://{edge-host-name}:9090/{ServiceComb微服务Name}/{服务路径&amp;amp;参数}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;用户微服务名（&lt;code class=&quot;highlighter-rouge&quot;&gt;service_description.name&lt;/code&gt;）是&lt;code class=&quot;highlighter-rouge&quot;&gt;user-service&lt;/code&gt;，因此login调用URL：&lt;em&gt;cse://user-service/login&lt;/em&gt;可以通过：&lt;em&gt;http://{edge-host-name}:9090/user-service/login&lt;/em&gt; 访问。&lt;/p&gt;

&lt;p&gt;如此一来，微服务名成为了路径的一部分，http协议的&lt;code class=&quot;highlighter-rouge&quot;&gt;hostname&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;port&lt;/code&gt;将固定指向Edge服务保持不变，灵活性大大增加了。&lt;/p&gt;

&lt;p&gt;到此我们还可以再做一点点改进，引入一个自定义配置&lt;code class=&quot;highlighter-rouge&quot;&gt;edge.routing-short-path.{简称}&lt;/code&gt;，映射微服务名：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;edge:
  routing-short-path:
    user: user-service
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的配置代表：&lt;em&gt;http://{edge-host-name}:9090/user/login&lt;/em&gt; 等效于：&lt;em&gt;http://{edge-host-name}:9090/user-service/login&lt;/em&gt; ，如此一来：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;URL能够更加简洁；&lt;/li&gt;
  &lt;li&gt;当微服务名发生变化，只需要调整对应的配置，不需要更改前端UI路径代码。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;53-实现边缘服务&quot;&gt;5.3 实现边缘服务&lt;/h2&gt;
&lt;h5 id=&quot;第一步引入edge-core依赖&quot;&gt;第一步：引入Edge Core依赖&lt;/h5&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.servicecomb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;edge-core&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;第二步编写调度器dispatcher&quot;&gt;第二步：编写调度器Dispatcher&lt;/h5&gt;
&lt;p&gt;Edge服务的核心就是调度器Dispatcher，ServiceComb Edge Core中的Dispatcher基于高性能的Vertx Reactive，轻松应对百万量级API请求的挑战；只需要继承AbstractEdgeDispatcher抽象类，添加对应的逻辑即可：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EdgeDispatcher&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbstractEdgeDispatcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOGGER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EdgeDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//此Dispatcher的优先级，Order级越小，路由策略优先级越高&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//初始化Dispatcher的路由策略&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;///捕获 {ServiceComb微服务Name}/{服务路径&amp;amp;参数} 的URL&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/([^\\\\/]+)/(.*)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;routeWithRegex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CookieHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;routeWithRegex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createBodyHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;routeWithRegex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;failureHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//处理请求，请注意&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RoutingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathParams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pathParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//从匹配的param0拿到{ServiceComb微服务Name}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;param0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//从匹配的param1拿到{服务路径&amp;amp;参数}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;param1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//还记得我们之前说的做出一点点改进吗？引入一个自定义配置edge.routing-short-path.{简称}，映射微服务名；如果简称没有配置，那么就认为直接是微服务的名&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DynamicPropertyFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStringProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;edge.routing-short-path.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//创建一个Edge转发&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EdgeInvocation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edgeInvocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EdgeInvocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//允许接受任意版本的微服务实例作为Provider，未来我们会使用此（设置版本）能力实现灰度发布&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;edgeInvocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setVersionRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefinitionConst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_RULE_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;edgeInvocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpServerFilters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;edgeInvocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;edgeInvoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;第三步加载调度器dispatcher&quot;&gt;第三步：加载调度器Dispatcher&lt;/h5&gt;
&lt;p&gt;ServiceComb Edge使用SPI（Service Provider Interface）的方式加载已经编写好的调度器Dispatcher，在resources目录下创建&lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF.services/org.apache.servicecomb.transport.rest.vertx.VertxHttpDispatcher&lt;/code&gt;配置文件，写入上一步EdgeDispatcher的类全名：&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{EdgeDispatcher的包名}.EdgeDispatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;第四步配置microserviceyaml&quot;&gt;第四步：配置microservice.yaml&lt;/h5&gt;
&lt;p&gt;边缘服务本身也是一个微服务，同样需要配置microservice.yaml：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;APPLICATION_ID&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;scaffold&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;service_description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;edge-service&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;servicecomb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#配置ServiceCenter使得Edge能够发现其他微服务&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://127.0.0.1:30100&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#配置Rest Endpoint&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:9090&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#自定义的简称机制配置（这是我们自行扩展实现的）&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;routing-short-path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;user-service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;提示：&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;除了配置Rest Endpoint，我们也支持配置Highway Endpoint，但Highway Endpoint只支持ServiceComb开发的微服务调用；&lt;/li&gt;
    &lt;li&gt;microservice.yaml中没有配置Handler，Edge支持所有Consumer端Handler，不支持Producer端Handler，调用链原理如下：&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/EdgeOnlySupportConsumerHandler.png&quot; alt=&quot;EdgeOnlySupportConsumerHandler&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;54-验证边缘服务&quot;&gt;5.4 验证边缘服务&lt;/h2&gt;
&lt;p&gt;启动用户微服务和Edge服务，使用&lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt;注册一个用户：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/LogonViaEdge.png&quot; alt=&quot;LogonViaEdge&quot; /&gt;&lt;/p&gt;

&lt;p&gt;成功，现在我们使用新注册的用户名&lt;code class=&quot;highlighter-rouge&quot;&gt;ldg&lt;/code&gt;登录：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/LoginViaEdge.png&quot; alt=&quot;LoginViaEdge&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同样成功，并在Response中已经包含了正确的&lt;code class=&quot;highlighter-rouge&quot;&gt;AUTHORIZATION&lt;/code&gt;Header。&lt;/p&gt;

&lt;h2 id=&quot;55-性能比拼&quot;&gt;5.5 性能比拼&lt;/h2&gt;
&lt;p&gt;ServiceComb Java Chassis也支持集成Netflix Zuul作为网关服务，我们做了一次性能比较，使用ServiceComb Edge作为网关吞吐能力大幅优于Netflix Zuul，性能测试项目源代码在&lt;a href=&quot;https://github.com/zhengyangyong/gateway-perf&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&quot;6-扩展边缘服务支持统一认证&quot;&gt;6 扩展边缘服务支持统一认证&lt;/h1&gt;
&lt;h2 id=&quot;61-设计思路&quot;&gt;6.1 设计思路&lt;/h2&gt;
&lt;p&gt;正如前面提到的，统一认证的目的是在Edge入口处进行访问认证，避免需要在所有的微服务中都承载重复的认证机制，因此：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;我们先要将认证功能作为一个独立的Procuder发布出来，使Edge服务能够随时认证Token，我们将其命名为&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationService&lt;/code&gt;，放在用户服务中；&lt;/li&gt;
  &lt;li&gt;将无需认证的访问请求识别出来，包括：&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;功能&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;login&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;登录验证，通过后为用户生成Token&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;logon&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;新用户注册&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;除此之外其他业务请求都需要做Token认证；&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Edge服务转发访问请求之前，对需要认证的请求先做统一认证，认证通过之后才转发，我们使用&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpServerFilter&lt;/code&gt;扩展这个能力：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/FilterChain.png&quot; alt=&quot;FilterChain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;统一认证流程时序图为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/EdgeAuth.png&quot; alt=&quot;EdgeAuth&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;62-实现统一认证&quot;&gt;6.2 实现统一认证&lt;/h2&gt;
&lt;h5 id=&quot;第一步发布认证服务&quot;&gt;第一步：发布认证服务&lt;/h5&gt;
&lt;h6 id=&quot;定义authenticationservice&quot;&gt;定义AuthenticationService&lt;/h6&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthenticationService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h6 id=&quot;实现并发布authenticationservice&quot;&gt;实现并发布AuthenticationService&lt;/h6&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestSchema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schemaId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;authentication&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthenticationServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthenticationService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TokenStore&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthenticationServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TokenStore&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tokenStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;validate&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvocationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;incorrect token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;第二步实现统一认证authenticationfilter&quot;&gt;第二步：实现统一认证AuthenticationFilter&lt;/h5&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthenticationFilter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServerFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestTemplateBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USER_SERVICE_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user-service&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EDGE_AUTHENTICATION_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;edge-authentication-name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOT_REQUIRED_VERIFICATION_USER_SERVICE_METHODS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;logon&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;validate&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;afterReceiveRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invocation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletRequestEx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpServletRequestEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInvocationNeedValidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMicroserviceName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOperationName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpServletRequestEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUTHORIZATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getForObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cse://&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USER_SERVICE_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/validate?token={token}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;//Add header&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EDGE_AUTHENTICATION_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;failResp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InvocationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UNAUTHORIZED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;authentication failed, invalid token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;failResp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvocationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UNAUTHORIZED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;authentication failed, missing AUTHORIZATION header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isInvocationNeedValidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USER_SERVICE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOT_REQUIRED_VERIFICATION_USER_SERVICE_METHODS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;别忘了通过SPI机制加载它，在&lt;code class=&quot;highlighter-rouge&quot;&gt;resources\META-INF\services&lt;/code&gt;目录中创建&lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.servicecomb.common.rest.filter.HttpServerFilter&lt;/code&gt;文件：&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;org.apache.servicecomb.scaffold.edge.filter.AuthenticationFilter
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;第三步在用户微服务中增加修改密码的功能用于验证&quot;&gt;第三步：在用户微服务中增加修改密码的功能用于验证&lt;/h5&gt;
&lt;p&gt;现有的&lt;code class=&quot;highlighter-rouge&quot;&gt;login&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;logon&lt;/code&gt;都无需认证，因此我们在用户微服务中增加需要认证的修改密码的功能用于验证统一认证。&lt;/p&gt;
&lt;h6 id=&quot;在userservice中添加修改密码&quot;&gt;在UserService中添加修改密码&lt;/h6&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//需要认证的修改密码功能&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;changePassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserUpdateDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;在userserviceimpl中实现修改密码&quot;&gt;在UserServiceImpl中实现修改密码&lt;/h6&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;changePassword&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;changePassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserUpdateDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validateUserUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UserEntity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOldPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dbUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNewPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvocationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wrong password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvocationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user name not exist&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvocationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;incorrect user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;63-验证实现的统一认证&quot;&gt;6.3 验证实现的统一认证&lt;/h2&gt;
&lt;h5 id=&quot;确认authenticationfilter在edge服务中成功加载&quot;&gt;确认AuthenticationFilter在Edge服务中成功加载&lt;/h5&gt;
&lt;p&gt;在Edge服务的启动日志中能够找到：&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-07-13 14:38:48,756 [INFO]   1. org.apache.servicecomb.scaffold.edge.filter.AuthenticationFilter. org.apache.servicecomb.foundation.common.utils.SPIServiceUtils.loadSortedService(SPIServiceUtils.java:79)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;用户登录&quot;&gt;用户登录&lt;/h5&gt;
&lt;p&gt;使用zhengyangyong登录：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/LoginFirst.png&quot; alt=&quot;LoginFirst&quot; /&gt;&lt;/p&gt;

&lt;p&gt;拿到的Token值为：eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ6aGVuZ3lhbmd5b25nIiwiZXhwIjoxNTMwNjA4OTczfQ.90teWUNbypPZvds_SD7Kus_y7wLc4b6VzC_aIVg8sLItKxwQ0g4V9BDU665PlqQY5KM-mnk8y0R6ENL1T8YVFg&lt;/p&gt;

&lt;h5 id=&quot;不带authorization-header请求changepassword&quot;&gt;不带Authorization Header请求changePassword&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/NoAuthHeader.png&quot; alt=&quot;NoAuthHeader&quot; /&gt;&lt;/p&gt;

&lt;p&gt;返回的失败信息是：authentication failed, missing AUTHORIZATION header&lt;/p&gt;

&lt;h5 id=&quot;使用错误的token请求changepassword&quot;&gt;使用错误的Token请求changePassword&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/ErrorAuthHeader.png&quot; alt=&quot;ErrorAuthHeader&quot; /&gt;&lt;/p&gt;

&lt;p&gt;返回的失败信息是：authentication failed : InvocationException: code=400;msg=CommonExceptionData [message=incorrect token]&lt;/p&gt;

&lt;h5 id=&quot;使用正确的token请求changepassword&quot;&gt;使用正确的Token请求changePassword&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/scaffold/AuthSuccess.png&quot; alt=&quot;AuthSuccess&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改密码成功。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这里可能有疑问，使用zhengyangyong登录后，是可以通过这个Token修改其他用户例如lidagang的密码的，这是因为我们目前构建的validate仅检查Token的有效性，而不做权限检查，基于RBAC的角色权限管理系统将会在未来构建。&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;提示：&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;AuthenticationFilter的完整&lt;a href=&quot;https://github.com/zhengyangyong/scaffold/blob/master/edge-service/src/main/java/org/apache/servicecomb/scaffold/edge/filter/AuthenticationFilter.java&quot;&gt;代码&lt;/a&gt;；&lt;/li&gt;
    &lt;li&gt;HttpServerFilter的&lt;a href=&quot;https://github.com/apache/incubator-servicecomb-docs/blob/master/java-chassis-reference/zh_CN/general-development/http-filter.md&quot;&gt;介绍&lt;/a&gt;。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;7小结&quot;&gt;7.小结&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;本文详细介绍了如何使用http://start.servicecomb.io脚手架快速构建微服务项目、使用领域驱动设计（Domain-Driven Design，DDD）设计地产CRM系统、使用Edge Service构建统一认证边缘服务等内容。至此，一个地产客户关系管理系统的骨架已经初步搭建起来，剩下的模块，我们将在接下来的文章里详细介绍。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Yangyong Zheng</name><email>yangyong.zheng@huawei.com</email><uri>https://zhengyangyong.github.io</uri></author><category term="CRM" /><category term="Scaffold" /><category term="DDD" /><category term="JPA" /><category term="JWT" /><category term="Edge" /><summary type="html">客户管理系统微服务化实战-PartI</summary></entry><entry xml:lang="en"><title type="html">[Milestone] Apache ServiceComb (incubating) Release Version 1.0.0</title><link href="/docs/release-note-1-0-0/" rel="alternate" type="text/html" title="[Milestone] Apache ServiceComb (incubating) Release Version 1.0.0" /><published>2018-08-20T00:00:00+08:00</published><updated>2018-06-14T10:26:28+08:00</updated><id>/docs/release-note-1-0-0</id><content type="html" xml:base="/docs/release-note-1-0-0/">&lt;p&gt;​	Recently,  the Apache Foundation Incubation Project - Apache ServiceComb (incubating) officially released its  1.0.0 version  through community voting. The release this time includes Apache ServiceComb Java-Chassis (hereinafter referred to as Java-chassis) and Apache ServiceComb ServiceCenter (hereinafter referred to as ServiceCenter).&lt;/p&gt;

&lt;p&gt;​	ServiceComb has entered the Apache Foundation since December 2017, and version 1.0.0-m1 released in March 2018  , 1.0.0-m2 in  June 2018 . Now in August 2018, the milestone of release -1.0.0  was completed.&lt;/p&gt;

&lt;p&gt;​	 At present, 10+ companies have used ServiceComb for commercial use, the ServiceComb team has already participated in 10+ Meetups to give a speech. Besides, the ServiceComb community also  held 3 Meetups. The release of version 1.0.0 this time means that the ServiceComb version has officially entered a stable state on the premise of meeting the requirements of the Apache Software Foundation. The main new features and enhancements of ServiceComb Java-chassis and Service-center after entering the Apache Foundation incubation are as follows:&lt;/p&gt;

&lt;h2 id=&quot;java-chassis&quot;&gt;Java-chassis&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;New Metrics module; Added a large number of monitoring indicators; Support Prometheus integration&lt;/li&gt;
  &lt;li&gt;Re-org the configuration center, support docking Ctrip Apollo as a configuration center, and easily extend the docking of other three-party configuration centers&lt;/li&gt;
  &lt;li&gt;The POJO programming model allows users to use CompletableFuture asynchronous programming&lt;/li&gt;
  &lt;li&gt;The POJO programming model allows users to use Object and Generic types as invoke parameters&lt;/li&gt;
  &lt;li&gt;Upgrade Zipkin to Zipkin2, and support both v1 and v2 versions of Zipkin server&lt;/li&gt;
  &lt;li&gt;Micro-service communication provides file stream capability and supports multimedia scenes such as music and pictures&lt;/li&gt;
  &lt;li&gt;Added support for API level QPS control based on service level QPS control;&lt;/li&gt;
  &lt;li&gt;Now we support using &lt;code class=&quot;highlighter-rouge&quot;&gt;servicecomb.flowcontrol.Consumer.qps.limit.[ServiceName].[Schema].[operation]&lt;/code&gt; to config the API level QPS control&lt;/li&gt;
  &lt;li&gt;Added  &lt;code class=&quot;highlighter-rouge&quot;&gt;scaffold&lt;/code&gt; and &lt;a href=&quot;http://start.servicecomb.io&quot;&gt;start.servicecomb.io&lt;/a&gt; to allow users quickly build projects and provide complete out-of-the-box capabilities
    &lt;ul&gt;
      &lt;li&gt; Now create a ServiceComb microservice can be quickly built by Apache Maven Archetype. For more details, please refer to &lt;a href=&quot;https://github.com/apache/incubator-servicecomb-java-chassis/blob/master/archetypes/README.md&quot;&gt;ServiceComb Java Chassis Archetypes&lt;/a&gt; , or you can directly access &lt;a href=&quot;http://start.servicecomb.io&quot;&gt;start.servicecomb.io&lt;/a&gt;  to use the  &lt;code class=&quot;highlighter-rouge&quot;&gt;SPRING INITIALIZR UI&lt;/code&gt; intergated by ServiceComb .&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Added a demonstration of how to build a ServiceComb project using &lt;code class=&quot;highlighter-rouge&quot;&gt;Gradle&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;We added the Gradle configuration to the &lt;a href=&quot;https://github.com/apache/incubator-servicecomb-java-chassis/tree/master/samples/bmi&quot;&gt;BMI&lt;/a&gt; project&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Asynchronous programming model supports &lt;code class=&quot;highlighter-rouge&quot;&gt;AsycRestTemplate&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Added support for the &lt;code class=&quot;highlighter-rouge&quot;&gt;http/2&lt;/code&gt; protocol&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Implemented error injection interface that allows constructing an exception scenario by intercepting a service request. For example, setting the delay and error of a request to a specified microservice and its triggering probability&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Added service Dev running mode, support contract dynamic modification when Dev mode is enabled&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Implemented graceful downtime, anti-registration when the service is closed, ensuring that the accepted request is completed and the resources are fully released&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Extend the micro-service public-private key authentication mechanism and add the  blacklist and whitelist function&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;ServiceCenter has already support control the registration of microservices through blacklist and whitelist. However, since microservices are directly connected to each other, the microservices themselves need to have independent blacklist and whitelist authentication.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Support Cross-Origin Resource Sharing (CORS);&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;For example, Ajax can directly access microservices.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Expanded the Access Log mechanism of Rest Endpoint&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Previously users could only set the Access Log’s Pattern. Now users can further customize the Access Log Item.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The SpringMVC programming model now also supports class objects as arguments&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Users can use class objects as parameters, for example：&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/address&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt; will be automatically converted to&lt;code class=&quot;highlighter-rouge&quot;&gt;/address?city={city}&amp;amp;country={country}&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Microservices deployed in web containers such as Tomcat, now support access path request services in conjunction with context path and servlet pattern&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;For example,if  the calling path is&lt;code class=&quot;highlighter-rouge&quot;&gt;cse://service/a/b...&lt;/code&gt;，can also  access via &lt;code class=&quot;highlighter-rouge&quot;&gt;cse://service/{context path}/{servlet pattern}/a/b...&lt;/code&gt; after deployed in web containers such as Tomcat&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Automatically scan the package of the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function to simplify user configuration&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Provides a client ping mechanism that can detect if a client cache instance is available through ping extension. This feature is enabled by default, and the instance isolation function is used to isolate instances that fail to detect&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;When the microservices are downgraded or the instance is isolated, the corresponding event will be triggered, which facilitates third-party integration (reporting)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;service-center&quot;&gt;Service-center&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;In total 3 releases has been done till date after incubation of Service-Center in Apache.&lt;/li&gt;
  &lt;li&gt;With every release there has been a significant addition of features and improvements.(like PACT Broker, Async Rest Template, Log Rotation, ipv6 support, Backend Store extension, Schema Testing, Self Discovery from Consumer )&lt;/li&gt;
  &lt;li&gt;With each release the stability of the Service-Center increased as more and more bugs were fixed.&lt;/li&gt;
  &lt;li&gt;Performance has increased significantly as lot of API’s were optimized related to Service Discovery.&lt;/li&gt;
  &lt;li&gt;Optimizations were done for Restful Clients and Plugin loaders.&lt;/li&gt;
  &lt;li&gt;Seamless integration of metrics &amp;amp; tracing were added in to improve the monitoring capabilities.&lt;/li&gt;
  &lt;li&gt;Security was improved in terms of Service Discovery based on rules, default TLS Cipher Suites were added.&lt;/li&gt;
  &lt;li&gt;Event driven mechanisms were adopted for Service-Dependency management.&lt;/li&gt;
  &lt;li&gt;Better management of data was implemented in case of recovery management.&lt;/li&gt;
  &lt;li&gt;Efforts were made to make the ETCD connection resilient and self healing.&lt;/li&gt;
  &lt;li&gt;Support for Async rest template and ipv6 supports were added.&lt;/li&gt;
  &lt;li&gt;Concrete License Management has been done to give full credits to the authors of third party dependencies used in the project.&lt;/li&gt;
  &lt;li&gt;Support for deployement of Service-Centere in multiple infrastructures has been added.&lt;/li&gt;
  &lt;li&gt;The Web Management Console was completely re-designed to provide better functionalities and user friendly.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Wang Qilin</name><email>wangqilintech@gmail.com</email><uri>https://github.com/wangkirin</uri></author><category term="microservice" /><category term="version" /><category term="release" /><summary type="html">Apache ServiceComb (incubating) enters new stage</summary></entry></feed>